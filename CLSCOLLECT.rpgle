     H DATFMT(*ISO)
     H DFTACTGRP(*NO)
     H ACTGRP(*CALLER)
     H DEBUG(*YES)
     H OPTION(*SRCSTMT:*NODEBUGIO)
     H BNDDIR('QC2LE')
      *À
      *ÀContains:
      *À - Interfaces:
      *À   - Collection
      *À   - Comparator
      *À   - List
      *À   - ListIterator
      *À   - Iterable
      *À   - Iterator
      *À   - Map
      *À   - MapEntry
      *À   - Set
      *À   - SortedSet
      *À
      *À - Classes:
      *À   - AbstractCollection
      *À   - AbstractMap
      *À   - AbstractSet
      *À   - GenericComparator
      *À   - Iterate (See Below)
      *À   - SimpleMapEntry
      *À
      *À - Class Iterate Static Methods:
      *À   - ComparatorSort
      *À   - ComparatorBinarySearch
      *À   - ComparatorBinarySearchInsert
      *À   - Comparator_NATURAL_ORDER
      *À   - ForEach
      *À   - newSimpleComparator
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀProcedures
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      *À
      *ÀCopy in required prototypes
     D/COPY RAYLIB/QDLLSRCV20,CPYUTILV20
     D/COPY RAYLIB/QDLLSRCV20,CPYOBJECT
     D/COPY RAYLIB/QDLLSRCV20,CPYARRAY
     D/COPY RAYLIB/QDLLSRCV20,CPYSTRING
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀStrutures
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀDefinitions
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀPrototypes
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterate: Class Definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D IterateClass...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀForEach: Iterate over a collection
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ForEach...
     D                 PR              N
     D  @Iterator                      *
     D  @Element                       *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀComparator: Sort
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ComparatorSort...
     D                 PR
     D  @Comparator                    *   CONST
     D  @Data                          *   CONST
     D  ArraySize                    10U 0 CONST
     D  ElementSize                  10U 0 CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀComparator: Internal Sort method
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ComparatorSort2...
     D                 PR            10I 0
     D  @ObjectA                       *   CONST
     D  @ObjectB                       *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀBinary Search on a Sorted Array using a Comparator
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ComparatorBinarySearch...
     D                 PR              *
     D  @Comparator                    *   CONST
     D  @Search                        *   CONST
     D  @Data                          *   CONST
     D  ArraySize                    10U 0 CONST
     D  ElementSize                  10U 0 CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀBinary Search on a Sorted Array using a Comparator, with Insert information
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ComparatorBinarySearchInsert...
     D                 PR              N
     D  @Comparator                    *   CONST
     D  @Search                        *   CONST
     D  @Data                          *   CONST
     D  ArraySize                    10U 0 CONST
     D  ElementSize                  10U 0 CONST
     D  @Element                       *
     D  FoundIndex                   10I 0
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀConvieniance Method for Natural Order Comparator creation
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D Comparator_NATURAL_ORDER...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterable: Interface Definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D IterableInterface...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterable: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D extendsIterable...
     D                 PR
     D  @Interface                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterable: Implements
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D implementsIterable...
     D                 PR
     D  @Class                         *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterable: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D castIterable...
     D                 PR
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterable: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D instanceOfIterable...
     D                 PR              N
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterable: New Iterator
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D IterableNewIterator...
     D                 PR              *
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterator: Interface Definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D IteratorInterface...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterator: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D extendsIterator...
     D                 PR
     D  @Interface                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterator: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D castIterator...
     D                 PR
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterator: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D instanceOfIterator...
     D                 PR              N
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterator: Implements
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D implementsIterator...
     D                 PR
     D  @Class                         *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterator: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D IteratorDlt...
     D                 PR              *
     D  @Object                        *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterator: HasNext
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D IteratorHasNext...
     D                 PR              N
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterator: Next
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D IteratorNext...
     D                 PR              *
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterator: Remove
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D IteratorRemove...
     D                 PR
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Interface Definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D CollectionInterface...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D extendsCollection...
     D                 PR
     D  @Interface                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D castCollection...
     D                 PR
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D instanceOfCollection...
     D                 PR              N
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Implements
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D implementsCollection...
     D                 PR
     D  @Class                         *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D CollectionDlt...
     D                 PR              *
     D  @this                          *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Add
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D CollectionAdd...
     D                 PR              N
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Add All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D CollectionAddAll...
     D                 PR              N
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Clear
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D CollectionClear...
     D                 PR
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Contains
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D CollectionContains...
     D                 PR              N
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Contains All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D CollectionContainsAll...
     D                 PR              N
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Retrieve HashCode
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D CollectionHashCode...
     D                 PR            10I 0
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Is Empty
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D CollectionIsEmpty...
     D                 PR              N
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: New Iterator
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D CollectionNewIterator...
     D                 PR              *
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Remove
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D CollectionRemove...
     D                 PR              N
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Remove All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D CollectionRemoveAll...
     D                 PR              N
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Retain All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D CollectionRetainAll...
     D                 PR              N
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Size
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D CollectionSize...
     D                 PR            10I 0
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Convert To Array
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D CollectionToArray...
     D                 PR              *
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀComparator: Interface Definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ComparatorInterface...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀComparator: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D extendsComparator...
     D                 PR
     D  @Interface                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀComparator: Implements
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D implementsComparator...
     D                 PR
     D  @Class                         *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀComparator: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D castComparator...
     D                 PR
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀComparator: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D instanceOfComparator...
     D                 PR              N
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀComparator: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ComparatorDlt...
     D                 PR              *
     D  @Comparator                    *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀComparator: Compare
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ComparatorCompare...
     D                 PR            10I 0
     D  @this                          *   CONST
     D  @ObjectA                       *   CONST
     D  @ObjectB                       *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀComparator: Equals
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ComparatorEquals...
     D                 PR              N
     D  @this                          *   CONST
     D  @that                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: Interface Definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ListInterface...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D extendsList...
     D                 PR
     D  @Interface                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D castList...
     D                 PR
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D instanceOfList...
     D                 PR              N
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: Implements
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D implementsList...
     D                 PR
     D  @Class                         *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ListDlt...
     D                 PR              *
     D  @this                          *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: Add
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ListAdd...
     D                 PR              N
     D  @this                          *   CONST
     D  @Element                       *   CONST
     D  Index                        10I 0 CONST OPTIONS(*NOPASS)
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: Add All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ListAddAll...
     D                 PR              N
     D  @this                          *   CONST
     D  @Collection                    *   CONST
     D  Index                        10I 0 CONST OPTIONS(*NOPASS)
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: Index Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ListIndexOf...
     D                 PR            10I 0
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: Last Index Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ListLastIndexOf...
     D                 PR            10I 0
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: New ListIterator
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ListNewListIterator...
     D                 PR              *
     D  @this                          *   CONST
     D  Index                        10I 0 CONST OPTIONS(*NOPASS)
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: SubList
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ListSubList...
     D                 PR              *
     D  @this                          *   CONST
     D  FromIndex                    10I 0 CONST
     D  ToIndex                      10I 0 CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Interface Definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ListIteratorInterface...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D extendsListIterator...
     D                 PR
     D  @Interface                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D castListIterator...
     D                 PR
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Instacne Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D InstanceOfListIterator...
     D                 PR              N
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Implements
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D implementsListIterator...
     D                 PR
     D  @Class                         *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ListIteratorDlt...
     D                 PR              *
     D  @this                          *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Add
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ListIteratorAdd...
     D                 PR
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Change
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ListIteratorChg...
     D                 PR
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: HasNext
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ListIteratorHasNext...
     D                 PR              N
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: HasPrevious
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ListIteratorHasPrevious...
     D                 PR              N
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Next
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ListIteratorNext...
     D                 PR              *
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Next Index
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ListIteratorNextIndex...
     D                 PR            10I 0
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Previous
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ListIteratorPrevious...
     D                 PR              *
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Previous Index
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ListIteratorPreviousIndex...
     D                 PR            10I 0
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Remove
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D ListIteratorRemove...
     D                 PR
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Interface Definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SetInterface...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D extendsSet...
     D                 PR
     D  @Interface                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D castSet...
     D                 PR
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D instanceOfSet...
     D                 PR              N
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Implements
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D implementsSet...
     D                 PR
     D  @Class                         *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SetDlt...
     D                 PR              *
     D  @this                          *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Add
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SetAdd...
     D                 PR              N
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Add All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SetAddAll...
     D                 PR              N
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Clear
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SetClear...
     D                 PR
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Contains
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SetContains...
     D                 PR              N
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Contains All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SetContainsAll...
     D                 PR              N
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Equals
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SetEquals...
     D                 PR              N
     D  @this                          *   CONST
     D  @that                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Retrieve HashCode
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SetHashCode...
     D                 PR            10I 0
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Is Empty
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SetIsEmpty...
     D                 PR              N
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: New Iterator
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SetNewIterator...
     D                 PR              *
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Remove
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SetRemove...
     D                 PR              N
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Remove All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SetRemoveAll...
     D                 PR              N
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Retain All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SetRetainAll...
     D                 PR              N
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Size
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SetSize...
     D                 PR            10I 0
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Convert To Array
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SetToArray...
     D                 PR              *
     D  @this                          *   CONST
      *À
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Interface Definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapInterface...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D extendsMap...
     D                 PR
     D  @Interface                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D castMap...
     D                 PR
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D InstanceOfMap...
     D                 PR              N
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Implements
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D implementsMap...
     D                 PR
     D  @Class                         *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapDlt...
     D                 PR              *
     D  @this                          *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Clear
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapClear...
     D                 PR
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Contains Key
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapContainsKey...
     D                 PR              N
     D  @this                          *   CONST
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Contains Value
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapContainsValue...
     D                 PR              N
     D  @this                          *   CONST
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Entry Set
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapEntrySet...
     D                 PR              *
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Equals
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapEquals...
     D                 PR              N
     D  @this                          *   CONST
     D  @that                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Get
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapGet...
     D                 PR              *
     D  @this                          *   CONST
     D  @Key                           *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Retrieve HashCode
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapHashCode...
     D                 PR            10I 0
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Is Empty
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapIsEmpty...
     D                 PR              N
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Key Set
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapKeySet...
     D                 PR              *
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Put
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapPut...
     D                 PR              *
     D  @this                          *   CONST
     D  @Key                           *   CONST
     D  @Value                         *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Put All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapPutAll...
     D                 PR
     D  @this                          *   CONST
     D  @Map                           *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Remove
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapRemove...
     D                 PR              *
     D  @this                          *   CONST
     D  @Key                           *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Size
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapSize...
     D                 PR            10I 0
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Values
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapValues...
     D                 PR              *
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: Interface Definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapEntryInterface...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D extendsMapEntry...
     D                 PR
     D  @Interface                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: Implements
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D implementsMapEntry...
     D                 PR
     D  @Class                         *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D castMapEntry...
     D                 PR
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D instanceOfMapEntry...
     D                 PR              N
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapEntryDlt...
     D                 PR              *
     D  @MapEntry                      *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: Equals
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapEntryEquals...
     D                 PR              N
     D  @MapEntry                      *   CONST
     D  @that                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: Get Key
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapEntryGetKey...
     D                 PR              *
     D  @MapEntry                      *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: Get Value
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapEntryGetValue...
     D                 PR              *
     D  @MapEntry                      *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: HashCode
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapEntryHashCode...
     D                 PR            10I 0
     D  @MapEntry                      *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: Set Value
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D MapEntrySetValue...
     D                 PR              *
     D  @MapEntry                      *   CONST
     D  @Value                         *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol Structure
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsCol_         DS                  QUALIFIED BASED(@NULL) ALIGN
     D   #Object                           LIKE(Object_)
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Class Definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsColClass...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: extend class
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D extendsAbsCol...
     D                 PR              *
     D pTemplate                  65535A   OPTIONS(*VARSIZE)
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D castAbsCol...
     D                 PR              *
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D instanceOfAbsCol...
     D                 PR              N
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsColDlt...
     D                 PR              *
     D  @AbsCol                        *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Finalise
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsColFinalise...
     D                 PR
     D  @AbsCol                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Initialise
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsColInitialise...
     D                 PR
     D  @AbsCol                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Add
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsColAdd...
     D                 PR              N
     D  @AbsCol                        *   CONST
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Add All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsColAddAll...
     D                 PR              N
     D  @AbsCol                        *   CONST
     D  @Collection                    *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Clear
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsColClear...
     D                 PR
     D  @AbsCol                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Contains
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsColContains...
     D                 PR              N
     D  @AbsCol                        *   CONST
     D  @Element                       *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Contains All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsColContainsAll...
     D                 PR              N
     D  @AbsCol                        *   CONST
     D  @Collection                    *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Is Empty
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsColIsEmpty...
     D                 PR              N
     D  @AbsCol                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: New Iterator
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsColNewIterator...
     D                 PR              *
     D  @AbsCol                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Remove
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsColRemove...
     D                 PR              N
     D  @AbsCol                        *   CONST
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Remove All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsColRemoveAll...
     D                 PR              N
     D  @AbsCol                        *   CONST
     D  @Collection                    *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Retain All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsColRetainAll...
     D                 PR              N
     D  @AbsCol                        *   CONST
     D  @Collection                    *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Size
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsColSize...
     D                 PR            10I 0
     D  @AbsCol                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: To Array
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsColToArray...
     D                 PR              *
     D  @AbsCol                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: To String
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsColToString...
     D                 PR              *
     D  @AbsCol                        *   CONST
      *À
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet Structure
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsSet_         DS                  QUALIFIED BASED(@NULL) ALIGN
     D   #Object                           LIKE(Object_)
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet: Class Definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsSetClass...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet: extend class
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D extendsAbsSet...
     D                 PR              *
     D pTemplate                  65535A   OPTIONS(*VARSIZE)
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D castAbsSet...
     D                 PR              *
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D instanceOfAbsSet...
     D                 PR              N
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsSetDlt...
     D                 PR              *
     D  @AbsSet                        *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet: Finalise
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsSetFinalise...
     D                 PR
     D  @AbsSet                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet: Initialise
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsSetInitialise...
     D                 PR
     D  @AbsSet                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet: Equals
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsSetEquals...
     D                 PR              N
     D  @AbsSet                        *   CONST
     D  @that                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet: HashCode
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsSetHashCode...
     D                 PR            10I 0
     D  @AbsSet                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet: Remove All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsSetRemoveAll...
     D                 PR              N
     D  @AbsSet                        *   CONST
     D  @Collection                    *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀEq: Object Equality Helper Method
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D Eq...
     D                 PR              N   EXTPROC(
     D                                     @ClsObject.@staticEquals)
     D  @this                          *   CONST
     D  @that                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySet: Structure
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #KeySet_        DS                  QUALIFIED BASED(@NULL) ALIGN
     D   #Object                           LIKE(Object_)
     D   @This                         *
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySet: Class Definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #KeySetClass...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySet: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D cast#KeySet...
     D                 PR              *
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySet: new
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D new#KeySet...
     D                 PR              *
     D  @Parent                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySet: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #KeySetDlt...
     D                 PR              *
     D  @KeySet                        *
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySet: New Iterator
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #KeySetNewIterator...
     D                 PR              *
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySet: Clear
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #KeySetClear...
     D                 PR
     D  @KeySet                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySet: Contains
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #KeySetContains...
     D                 PR              N
     D  @KeySet                        *   CONST
     D  @Key                           *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySet: Is Empty
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #KeySetIsEmpty...
     D                 PR              N
     D  @KeySet                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySet: Size
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #KeySetSize...
     D                 PR            10I 0
     D  @KeySet                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySetItr: Structure
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #KeySetItr_     DS                  QUALIFIED BASED(@NULL) ALIGN
     D   #Object                           LIKE(Object_)
     D   @Iterator                     *
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySetItr: Class Definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #KeySetItrClass...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySetItr: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D cast#KeySetItr...
     D                 PR              *
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySetItr: new
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D new#KeySetItr...
     D                 PR              *
     D  @Parent                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySetItr: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #KeySetItrDlt...
     D                 PR              *
     D  @KeySetItr                     *
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySetItr: Has Next
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #KeySetItrHasNext...
     D                 PR              N
     D  @KeySetItr                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySetItr: Next
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #KeySetItrNext...
     D                 PR              *
     D  @KeySetItr                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySetItr: Remove
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #KeySetItrRemove...
     D                 PR
     D  @KeySetItr                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValCol: Structure
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #ValCol_        DS                  QUALIFIED BASED(@NULL) ALIGN
     D   #Object                           LIKE(Object_)
     D   @This                         *
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValCol: Class Definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #ValColClass...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValCol: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D cast#ValCol...
     D                 PR              *
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValCol: new
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D new#ValCol...
     D                 PR              *
     D  @Parent                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValCol: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #ValColDlt...
     D                 PR              *
     D  @KeySet                        *
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValCol: New Iterator
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #ValColNewIterator...
     D                 PR              *
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValCol: Clear
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #ValColClear...
     D                 PR
     D  @KeySet                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValCol: Contains
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #ValColContains...
     D                 PR              N
     D  @KeySet                        *   CONST
     D  @Key                           *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValCol: Is Empty
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #ValColIsEmpty...
     D                 PR              N
     D  @KeySet                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValCol: Size
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #ValColSize...
     D                 PR            10I 0
     D  @KeySet                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValColItr: Structure
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #ValColItr_     DS                  QUALIFIED BASED(@NULL) ALIGN
     D   #Object                           LIKE(Object_)
     D   @Iterator                     *
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValColItr: Class Definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #ValColItrClass...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValColItr: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D cast#ValColItr...
     D                 PR              *
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValColItr: new
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D new#ValColItr...
     D                 PR              *
     D  @Parent                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValColItr: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #ValColItrDlt...
     D                 PR              *
     D  @KeySetItr                     *
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValColItr: Has Next
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #ValColItrHasNext...
     D                 PR              N
     D  @KeySetItr                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValColItr: Next
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #ValColItrNext...
     D                 PR              *
     D  @KeySetItr                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValColItr: Remove
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D #ValColItrRemove...
     D                 PR
     D  @KeySetItr                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: Structure
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SmpMapEnt_      DS                  QUALIFIED BASED(@NULL) ALIGN
     D   #Object                           LIKE(Object_)
     D   @Key                          *
     D   @Value                        *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: Class Definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SmpMapEntClass...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: extend class
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D extendsSmpMapEnt...
     D                 PR              *
     D pTemplate                  65535A   OPTIONS(*VARSIZE)
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D castSmpMapEnt...
     D                 PR              *
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D instanceOfSmpMapEnt...
     D                 PR              N
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: newSmpMapEnt(MapEntry) or newSmpMapEnt(Key:Value)
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D newSmpMapEnt...
     D                 PR              *
     D  o@Parm1                        *   CONST OPTIONS(*NOPASS)
     D  o@Parm2                        *   CONST OPTIONS(*NOPASS)
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SmpMapEntDlt...
     D                 PR              *
     D  @SmpMapEnt                     *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: Finalise
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SmpMapEntFinalise...
     D                 PR
     D  @SmpMapEnt                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: Initialise
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SmpMapEntInitialise...
     D                 PR
     D  @SmpMapEnt                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: Equals
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SmpMapEntEquals...
     D                 PR              N
     D  @SmpMapEnt                     *   CONST
     D  @that                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: Get Key
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SmpMapEntGetKey...
     D                 PR              *
     D  @SmpMapEnt                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: Get Value
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SmpMapEntGetValue...
     D                 PR              *
     D  @SmpMapEnt                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: HashCode
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SmpMapEntHashCode...
     D                 PR            10I 0
     D  @SmpMapEnt                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: Set Value
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SmpMapEntSetValue...
     D                 PR              *
     D  @SmpMapEnt                     *   CONST
     D  @Value                         *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: To String
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SmpMapEntToString...
     D                 PR              *
     D  @SmpMapEnt                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: To Varying
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SmpMapEntToVarying...
     D                 PR           510A   VARYING
     D  @SmpMapEnt                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Structure
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMap_         DS                  QUALIFIED BASED(@NULL) ALIGN
     D   #Object                           LIKE(Object_)
     D   @KeySet                       *
     D   @Values                       *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Class Definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapClass...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: extend class
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D extendsAbsMap...
     D                 PR              *
     D pTemplate                  65535A   OPTIONS(*VARSIZE)
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D castAbsMap...
     D                 PR              *
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D instanceOfAbsMap...
     D                 PR              N
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapDlt...
     D                 PR              *
     D  @AbsMap                        *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Finalise
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapFinalise...
     D                 PR
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Initialise
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapInitialise...
     D                 PR
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Clear
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapClear...
     D                 PR
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Clone
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapClone...
     D                 PR              *
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Contains Key
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapContainsKey...
     D                 PR              N
     D  @this                          *   CONST
     D  @Key                           *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Contains Value
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapContainsValue...
     D                 PR              N
     D  @this                          *   CONST
     D  @Value                         *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Entry Set
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapEntrySet...
     D                 PR              *
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Equals
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapEquals...
     D                 PR              N
     D  @this                          *   CONST
     D  @that                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Get
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapGet...
     D                 PR              *
     D  @this                          *   CONST
     D  @Key                           *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: HashCode
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapHashCode...
     D                 PR            10I 0
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Is Empty
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapIsEmpty...
     D                 PR              N
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Key Set
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapKeySet...
     D                 PR              *
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Put (throws exception unless overriden)
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapPut...
     D                 PR              *
     D  @this                          *   CONST
     D  @Key                           *   CONST
     D  @Value                         *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: PutAll
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapPutAll...
     D                 PR
     D  @this                          *   CONST
     D  @Map                           *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Remove
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapRemove...
     D                 PR              *
     D  @this                          *   CONST
     D  @Key                           *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Size
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapSize...
     D                 PR            10I 0
     D  @AbsMap                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: To String
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapToString...
     D                 PR              *
     D  @AbsMap                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: To Varying
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapToVarying...
     D                 PR           510A   VARYING
     D  @AbsMap                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Values
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapValues...
     D                 PR              *
     D  @AbsMap                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Maintain public field - @KeySet
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapMntFld@KeySet...
     D                 PR              *
     D  @this                          *   CONST
     D  @NewValue                      *   CONST OPTIONS(*NOPASS)
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Maintain public field - @Values
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D AbsMapMntFld@Values...
     D                 PR              *
     D  @this                          *   CONST
     D  @NewValue                      *   CONST OPTIONS(*NOPASS)
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀGenericComparator: Structure
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SmpCmp_         DS                  QUALIFIED BASED(@NULL) ALIGN
     D   #Object                           LIKE(Object_)
     D   @Compare                      *   PROCPTR
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpCmp: Class Definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SmpCmpClass...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpCmp: extend class
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D extendsSmpCmp...
     D                 PR              *
     D pTemplate                  65535A   OPTIONS(*VARSIZE)
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpCmp: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D castSmpCmp...
     D                 PR              *
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpCmp: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D instanceOfSmpCmp...
     D                 PR              N
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpCmp: New
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D newSmpCmp...
     D                 PR              *
     D  @Compare                       *   PROCPTR CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpCmp: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SmpCmpDlt...
     D                 PR              *
     D  @SmpCmp                        *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpCmp: Compare
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SmpCmpCompare...
     D                 PR            10I 0
     D  @this                          *   CONST
     D  @ObjectA                       *   CONST
     D  @ObjectB                       *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpCmp: Equals
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SmpCmpEquals...
     D                 PR              N
     D  @this                          *   CONST
     D  @that                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpCmp: HashCode
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SmpCmpHashCode...
     D                 PR            10I 0
     D  @this                          *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: Interface Definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SortedSetInterface...
     D                 PR              *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D extendsSortedSet...
     D                 PR
     D  @Interface                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: Implements
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D implementsSortedSet...
     D                 PR
     D  @Class                         *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D castSortedSet...
     D                 PR
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D instanceOfSortedSet...
     D                 PR              N
     D  @Object                        *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SortedSetDlt...
     D                 PR              *
     D  @SortedSet                     *
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: Comparator
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SortedSetComparator...
     D                 PR              *
     D  @SortedSet                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: First
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SortedSetFirst...
     D                 PR              *
     D  @SortedSet                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: HeadSet
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SortedSetHeadSet...
     D                 PR              *
     D  @SortedSet                     *   CONST
     D  @ElementTo                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: Last
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SortedSetLast...
     D                 PR              *
     D  @SortedSet                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: SubSet
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SortedSetSubSet...
     D                 PR              *
     D  @SortedSet                     *   CONST
     D  @ElementFrom                   *   CONST
     D  @ElementTo                     *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: TailSet
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D SortedSetTailSet...
     D                 PR              *
     D  @SortedSet                     *   CONST
     D  @ElementFrom                   *   CONST
      *À
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀConstants and Work Fields
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      *À
      *ÀStructure to hold copies of current comparator
     D Safe_           DS                  QUALIFIED BASED(@NULL)
     D  @this                          *
     D  @Compare                       *   PROCPTR
      *À
      *ÀCurrent Comparator
     D CurrentComparator...
     D                 DS                  LIKEDS(Safe_)
      *À
     D Compare...
     D                 PR            10I 0 EXTPROC(
     D                                     CurrentComparator.@Compare)
     D  @this                          *   CONST
     D  @ObjectA                       *   CONST
     D  @ObjectB                       *   CONST
      *À
      *ÀSystem Information Data Structure
     D                SDS
     D  PgmNam                 1     10A
     D  PgmLib                81     90A
      *À
      *À--------------------------------------------------------------------------------------------
      *À*ENTRY PLIST Parameters
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     D Main            PR                  EXTPGM('CLSCOLLECT')
     D  @Template                      *   CONST
     D  @SubClass                      *   CONST
      *À
     D Main            PI
     D  @Template                      *   CONST
     D  @SubClass                      *   CONST
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀStart of executable
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /free

         //ÀThis program uses automatic initialisation
         //ÀEXSR *INZSR ;

         //ÀDecide what to do
            SELECT ;

         //ÀClass: Iterate
            WHEN (ClassLinkName(@Template) = 'Iterate') ;
               ClassLink(IterateClass():@Template:@SubClass) ;

         //ÀInterface: Iterable
            WHEN (ClassLinkName(@Template) = 'Iterable') ;
               InterfaceLink(IterableInterface():@Template) ;

         //ÀInterface: Iterator
            WHEN (ClassLinkName(@Template) = 'Iterator') ;
               InterfaceLink(IteratorInterface():@Template) ;

         //ÀInterface: Collection
            WHEN (ClassLinkName(@Template) = 'Collection') ;
               InterfaceLink(CollectionInterface():@Template) ;

         //ÀInterface: Comparator
            WHEN (ClassLinkName(@Template) = 'Comparator') ;
               InterfaceLink(ComparatorInterface():@Template) ;

         //ÀInterface: List
            WHEN (ClassLinkName(@Template) = 'List') ;
               InterfaceLink(ListInterface():@Template) ;

         //ÀInterface: ListIterator
            WHEN (ClassLinkName(@Template) = 'ListIterator') ;
               InterfaceLink(ListIteratorInterface():@Template) ;

         //ÀInterface: Set
            WHEN (ClassLinkName(@Template) = 'Set') ;
               InterfaceLink(SetInterface():@Template) ;

         //ÀInterface: SortedSet
            WHEN (ClassLinkName(@Template) = 'SortedSet') ;
               InterfaceLink(SortedSetInterface():@Template) ;

         //ÀInterface: Map
            WHEN (ClassLinkName(@Template) = 'Map') ;
               InterfaceLink(MapInterface():@Template) ;

         //ÀInterface: MapEntry
            WHEN (ClassLinkName(@Template) = 'MapEntry') ;
               InterfaceLink(MapEntryInterface():@Template) ;

         //ÀClass: AbstractCollection
            WHEN (ClassLinkName(@Template) = 'AbstractCollection') ;
               ClassLink(AbsColClass():@Template:@SubClass) ;

         //ÀClass: AbstractSet
            WHEN (ClassLinkName(@Template) = 'AbstractSet') ;
               ClassLink(AbsSetClass():@Template:@SubClass) ;

         //ÀClass: AbstractMap
            WHEN (ClassLinkName(@Template) = 'AbstractMap') ;
               ClassLink(AbsMapClass():@Template:@SubClass) ;

         //ÀClass: SimpleMapEntry
            WHEN (ClassLinkName(@Template) = 'SimpleMapEntry') ;
               ClassLink(SmpMapEntClass():@Template:@SubClass) ;

         //ÀUnknown name
            OTHER ;
               Throw('Unrecognised class name: '+ClassLinkName(@Template)) ;
            ENDSL ;

         //ÀFinished
            RETURN ;

         //À----------------------------------------------------------------------------------------
         //ÀAutomatic Initialisation
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR *INZSR ;

            //ÀLoad Utilities
               DLLUtility(@DLLUtility) ;

            //ÀIncludes
               include(@ClsObject) ;
               include(@ClsClass) ;
               include(@ClsInterface) ;
               include(@IfcComparable) ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterate: Class definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P IterateClass...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *
      *ÀClass Definition Template
     D #template       DS                  QUALIFIED
     D                               16A   INZ('*CLASS*TEMPLATE*')
     D                              126A   VARYING INZ('Iterate')
     D                               10I 0 INZ(ACCESS_PUB_FIN)
     D                               10I 0 INZ(%Size(#template))
     D                               10I 0 INZ(0)
     D                                4A
      *
     D                              126A   VARYING INZ(
     D                                     'ComparatorBinarySearch')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ComparatorBinarySearch))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'ComparatorBinarySearchInsert')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ComparatorBinarySearchInsert))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'ComparatorSort')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ComparatorSort))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'ForEach')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ForEach))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'newSimpleComparator')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     newSmpCmp))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'Comparator_NATURAL_ORDER')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     Comparator_NATURAL_ORDER))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
      *À
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀBuild class definition
            @this= extendsObject(#template) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀForEach: Iterate over a collection
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ForEach...
     P                 B
     D                 PI              N
     D  @Iterator                      *
     D  @Element                       *
      *À
      /free

         //ÀReturn next element if there is one
            IF IteratorHasNext(@Iterator) ;
               @Element= IteratorNext(@Iterator) ;
               RETURN true ;
            ENDIF ;

         //ÀDelete used iterator
            ObjectDlt(@Iterator) ;

         //ÀFinished
            RETURN false ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀPerform a Binary Search on a Sorted Array using a Comparator
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ComparatorBinarySearch...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
     D p@Search                        *   CONST
     D  @Data                          *   CONST
     D  ArraySize                    10U 0 CONST
     D  ElementSize                  10U 0 CONST
      *À
     D @Element        S               *
     D @Compare        S               *   PROCPTR
     D @Search         S               *
      *À
     D Saved           DS                  LIKEDS(Safe_)
      *À
     D @SmpCmp         S               *
     D SmpCmp          DS                  LIKEDS(SmpCmp_) BASED(@SmpCmp)
      *À
      /free

         //ÀCast to correct type
            castComparator(@this) ;

         //ÀFetch parameter
            @Search= p@Search ;

         //ÀCheck for SimpleComparator types
            IF (instanceOfSmpCmp(@this) = true) ;
               EXSR DoSmpCmp ;
            ELSE ;
               EXSR DoOther ;
            ENDIF ;

         //ÀFinished
            RETURN @Element ;

         //À----------------------------------------------------------------------------------------
         //ÀProcess SimpleComparator
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR DoSmpCmp ;

         //ÀPick up instance pointer
            @SmpCmp= castSmpCmp(@this) ;

         //ÀSearch
            @Element=
              Utility_BSearch(
                %Addr(@Search):
                @Data:
                ArraySize:
                ElementSize:
                SmpCmp.@Compare) ;

         //ÀFinished
            ENDSR ;

         //À----------------------------------------------------------------------------------------
         //ÀProcess other comparators
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR DoOther ;

         //ÀSave Current Details
            Saved= CurrentComparator ;

         //ÀSend any errors back to the caller
            MONITOR ;
               @Compare=
                 InterfaceRtv(ComparatorInterface():
                 @this:'thisCompare') ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀStore Current Details
            CurrentComparator.@this= @this ;
            CurrentComparator.@Compare= @Compare ;

         //ÀSearch
            @Element=
              Utility_BSearch(
                %Addr(@Search):
                @Data:
                ArraySize:
                ElementSize:
                %pAddr(ComparatorSort2)) ;

         //ÀRestore
            CurrentComparator= Saved ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀPerform a Binary Search on a Sorted Array using a Comparator, with insert information
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ComparatorBinarySearchInsert...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @Search                        *   CONST
     D  @Data                          *   CONST
     D  ArraySize                    10U 0 CONST
     D  ElementSize                  10U 0 CONST
     D  @Element                       *
     D  FoundIndex                   10I 0
      *À
     D Found           S               N
     D @Compare        S               *   PROCPTR
      *À
     D Saved           DS                  LIKEDS(Safe_)
      *À
     D @SmpCmp         S               *
     D SmpCmp          DS                  LIKEDS(SmpCmp_) BASED(@SmpCmp)
      *À
      /free

         //ÀCast to correct type
            castComparator(@this) ;

         //ÀCheck for SimpleComparator types
            IF (instanceOfSmpCmp(@this) = true) ;
               EXSR DoSmpCmp ;
            ELSE ;
               EXSR DoOther ;
            ENDIF ;

         //ÀFinished
            RETURN Found ;

         //À----------------------------------------------------------------------------------------
         //ÀProcess SimpleComparator
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR DoSmpCmp ;

         //ÀPick up instance pointer
            @SmpCmp= castSmpCmp(@this) ;

         //ÀSearch
            Found=
              Utility_BinarySearch(
                @Search:
                @Data:
                ArraySize:
                ElementSize:
                SmpCmp.@Compare:
                @Element:
                FoundIndex) ;

         //ÀFinished
            ENDSR ;

         //À----------------------------------------------------------------------------------------
         //ÀProcess other comparators
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR DoOther ;

         //ÀSave Current Details
            Saved= CurrentComparator ;

         //ÀSend any errors back to the caller
            MONITOR ;
               @Compare=
                 InterfaceRtv(ComparatorInterface():
                 @this:'thisCompare') ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀStore Current Details
            CurrentComparator.@this= @this ;
            CurrentComparator.@Compare= @Compare ;

         //ÀSearch
            Found=
              Utility_BinarySearch(
                @Search:
                @Data:
                ArraySize:
                ElementSize:
                %pAddr(ComparatorSort2):
                @Element:
                FoundIndex) ;

         //ÀRestore
            CurrentComparator= Saved ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀComparator: Sort
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ComparatorSort...
     P                 B
     D                 PI
     D  @this                          *   CONST
     D  @Data                          *   CONST
     D  ArraySize                    10U 0 CONST
     D  ElementSize                  10U 0 CONST
      *À
     D @Compare        S               *   PROCPTR
      *À
     D Saved           DS                  LIKEDS(Safe_)
      *À
     D @SmpCmp         S               *
     D SmpCmp          DS                  LIKEDS(SmpCmp_) BASED(@SmpCmp)
      *À
      /free

         //ÀCast to correct type
            castComparator(@this) ;

         //ÀCheck for SimpleComparator types
            IF (instanceOfSmpCmp(@this) = true) ;
               EXSR DoSmpCmp ;
            ELSE ;
               EXSR DoOther ;
            ENDIF ;

         //ÀFinished
            RETURN ;

         //À----------------------------------------------------------------------------------------
         //ÀProcess SimpleComparator
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR DoSmpCmp ;

         //ÀPick up instance pointer
            @SmpCmp= castSmpCmp(@this) ;

         //ÀSort
            Utility_QSort(
              @Data:
              ArraySize:
              ElementSize:
              SmpCmp.@Compare) ;

         //ÀFinished
            RETURN ;
            ENDSR ;

         //À----------------------------------------------------------------------------------------
         //ÀProcess other comparators
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR DoOther ;

         //ÀSave Current Details
            Saved= CurrentComparator ;

         //ÀSend any errors back to the caller
            MONITOR ;
               @Compare=
                 InterfaceRtv(ComparatorInterface():
                 @this:'thisCompare') ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀStore Current Details
            CurrentComparator.@this= @this ;
            CurrentComparator.@Compare= @Compare ;

         //ÀSort
            Utility_QSort(
              @Data:
              ArraySize:
              ElementSize:
              %pAddr(ComparatorSort2)) ;

         //ÀRestore
            CurrentComparator= Saved ;

         //ÀFinished
            RETURN ;
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀComparator: Sort - 2
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ComparatorSort2...
     P                 B
     D                 PI            10I 0
     D  @ObjectA                       *   CONST
     D  @ObjectB                       *   CONST
      *À
      /free

         //ÀFinished
            RETURN Compare(CurrentComparator.@this:@ObjectA:@ObjectB) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀConvieniance Method for Natural Order Comparator creation
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P Comparator_NATURAL_ORDER...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *À
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀUse Simple Comparator class
            Assign(@this:
               newSmpCmp(%pAddr(ComparableCompareTo))) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterable: Interface definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P IterableInterface...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *
      *ÀInterface Definition Template
     D #template       DS                  QUALIFIED
     D                               16A   INZ('*IFACE*TEMPLATE*')
     D                              126A   VARYING INZ(
     D                                     'Iterable')
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               10I 0 INZ(%Size(#template))
     D                                8A
      *
     D                              126A   VARYING INZ(
     D                                     'extendsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     extendsIterable))
      *
     D                              126A   VARYING INZ(
     D                                     'castThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     castIterable))
      *
     D                              126A   VARYING INZ(
     D                                     'instanceOfThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     instanceOfIterable))
      *
     D                              126A   VARYING INZ(
     D                                     'implementsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     implementsIterable))
      *
     D                              126A   VARYING INZ(
     D                                     'thisNewIterator')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     IterableNewIterator))
      *À
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀBuild interface definition
            @this= newInterface(#template) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterable: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P extendsIterable...
     P                 B
     D                 PI
     D  @Interface                     *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceExtends(IterableInterface():
                 @Interface) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterable: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P castIterable...
     P                 B
     D                 PI
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceCast(IterableInterface():
                 @this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterable: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P instanceOfIterable...
     P                 B
     D                 PI              N
     D  @Object                        *   CONST
      *À
      /free

         //ÀFinished
            RETURN (
              InterfaceInstanceOf(
                IterableInterface():
                @Object) = INTERFACE_INSTANCE_EXACT_MATCH) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterable: Implements
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P implementsIterable...
     P                 B
     D                 PI
     D  @Class                         *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceImplements(IterableInterface():
                 @Class) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterable: New Iterator
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P IterableNewIterator...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 IterableInterface():
                 @this:
                 'thisNewIterator') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterator: Interface definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P IteratorInterface...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *
      *ÀInterface Definition Template
     D #template       DS                  QUALIFIED
     D                               16A   INZ('*IFACE*TEMPLATE*')
     D                              126A   VARYING INZ(
     D                                     'Iterator')
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               10I 0 INZ(%Size(#template))
     D                                8A
      *
     D                              126A   VARYING INZ(
     D                                     'extendsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     extendsIterator))
      *
     D                              126A   VARYING INZ(
     D                                     'castThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     castIterator))
      *
     D                              126A   VARYING INZ(
     D                                     'instanceOfThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     instanceOfIterator))
      *
     D                              126A   VARYING INZ(
     D                                     'implementsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     implementsIterator))
      *
     D                              126A   VARYING INZ(
     D                                     'thisDlt')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     IteratorDlt))
      *
     D                              126A   VARYING INZ(
     D                                     'thisHasNext')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     IteratorHasNext))
      *
     D                              126A   VARYING INZ(
     D                                     'thisNext')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     IteratorNext))
      *
     D                              126A   VARYING INZ(
     D                                     'thisRemove')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     IteratorRemove))
      *
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀBuild interface definition
            @this= newInterface(#template) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterator: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P extendsIterator...
     P                 B
     D                 PI
     D  @Interface                     *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceExtends(IteratorInterface():
                 @Interface) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterator: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P castIterator...
     P                 B
     D                 PI
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceCast(IteratorInterface():
                 @this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterator: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P instanceOfIterator...
     P                 B
     D                 PI              N
     D  @Object                        *   CONST
      *À
      /free

         //ÀFinished
            RETURN (
              InterfaceInstanceOf(
                IteratorInterface():
                @Object) = INTERFACE_INSTANCE_EXACT_MATCH) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterator: Implements
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P implementsIterator...
     P                 B
     D                 PI
     D  @Class                         *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceImplements(IteratorInterface():
                 @Class) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterator: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P IteratorDlt...
     P                 B
     D                 PI              *
     D  @this                          *
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *
     D                                     EXTPROC(@Action)
     D  @this                          *
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 IteratorInterface():
                 @this:
                 'thisDlt') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterator: HasNext
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P IteratorHasNext...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N
     D                                     EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 IteratorInterface():
                 @this:
                 'thisHasNext') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterator: Next
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P IteratorNext...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *
     D                                     EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 IteratorInterface():
                 @this:
                 'thisNext') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀIterator: Remove
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P IteratorRemove...
     P                 B
     D                 PI
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR
     D                                     EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 IteratorInterface():
                 @this:
                 'thisRemove') ;
               Action(@this) ;
               RETURN ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Interface definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P CollectionInterface...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *
      *ÀInterface Definition Template
     D #template       DS                  QUALIFIED
     D                               16A   INZ('*IFACE*TEMPLATE*')
     D                              126A   VARYING INZ(
     D                                     'Collection')
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               10I 0 INZ(%Size(#template))
     D                                8A
      *
     D                              126A   VARYING INZ(
     D                                     'extendsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     extendsCollection))
      *
     D                              126A   VARYING INZ(
     D                                     'castThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     castCollection))
      *
     D                              126A   VARYING INZ(
     D                                     'instanceOfThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     instanceOfCollection))
      *
     D                              126A   VARYING INZ(
     D                                     'implementsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     implementsCollection))
      *
     D                              126A   VARYING INZ(
     D                                     'thisDlt')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     CollectionDlt))
      *
     D                              126A   VARYING INZ(
     D                                     'thisAdd')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     CollectionAdd))
      *
     D                              126A   VARYING INZ(
     D                                     'thisAddAll')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     CollectionAddAll))
      *
     D                              126A   VARYING INZ(
     D                                     'thisClear')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     CollectionClear))
      *
     D                              126A   VARYING INZ(
     D                                     'thisContains')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     CollectionContains))
      *
     D                              126A   VARYING INZ(
     D                                     'thisContainsAll')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     CollectionContainsAll))
      *
     D                              126A   VARYING INZ(
     D                                     'thisHashCode')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     CollectionHashCode))
      *
     D                              126A   VARYING INZ(
     D                                     'thisIsEmpty')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     CollectionIsEmpty))
      *
     D                              126A   VARYING INZ(
     D                                     'thisNewIterator')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     CollectionNewIterator))
      *
     D                              126A   VARYING INZ(
     D                                     'thisRemove')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     CollectionRemove))
      *
     D                              126A   VARYING INZ(
     D                                     'thisRemoveAll')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     CollectionRemoveAll))
      *
     D                              126A   VARYING INZ(
     D                                     'thisRetainAll')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     CollectionRetainAll))
      *
     D                              126A   VARYING INZ(
     D                                     'thisSize')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     CollectionSize))
      *
     D                              126A   VARYING INZ(
     D                                     'thisToArray')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     CollectionToArray))
      *À
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀBuild interface definition
            @this= newInterface(#template) ;

         //ÀExtends Iterable interface
            extendsIterable(@this) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P extendsCollection...
     P                 B
     D                 PI
     D  @Interface                     *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceExtends(CollectionInterface():
                 @Interface) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P castCollection...
     P                 B
     D                 PI
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceCast(CollectionInterface():@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P instanceOfCollection...
     P                 B
     D                 PI              N
     D  @Object                        *   CONST
      *À
      /free

         //ÀFinished
            RETURN (
              InterfaceInstanceOf(
                CollectionInterface():
                @Object) = INTERFACE_INSTANCE_EXACT_MATCH) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Implements
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P implementsCollection...
     P                 B
     D                 PI
     D  @Class                         *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceImplements(CollectionInterface():@Class) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P CollectionDlt...
     P                 B
     D                 PI              *
     D  @this                          *
      *À
      /free

         //ÀMust be correct type
            InterfaceCast(CollectionInterface():@this) ;

         //ÀFinished
            RETURN ObjectDlt(@this) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Add
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P CollectionAdd...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N
     D                                     EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                  CollectionInterface():
                  @this:
                  'thisAdd') ;
               RETURN Action(@this:@Element) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Add All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P CollectionAddAll...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 CollectionInterface():
                 @this:
                 'thisAddAll') ;
               RETURN Action(@this:@Collection) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Clear
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P CollectionClear...
     P                 B
     D                 PI
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR                  EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 CollectionInterface():
                 @this:
                 'thisClear') ;
               Action(@this) ;
               RETURN ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Contains
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P CollectionContains...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 CollectionInterface():
                 @this:
                 'thisContains') ;
               RETURN Action(@this:@Element) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Contains All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P CollectionContainsAll...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(CollectionInterface():@this:
                 'thisContainsAll') ;
               RETURN Action(@this:@Collection) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Retrieve HashCode
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P CollectionHashCode...
     P                 B
     D                 PI            10I 0
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR            10I 0 EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(CollectionInterface():@this:
                 'thisHashCode') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Is Empty
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P CollectionIsEmpty...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(CollectionInterface():@this:
                 'thisIsEmpty') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: New Iterator
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P CollectionNewIterator...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(CollectionInterface():@this:
                 'thisNewIterator') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Remove
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P CollectionRemove...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(CollectionInterface():@this:
                 'thisRemove') ;
               RETURN Action(@this:@Element) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Remove All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P CollectionRemoveAll...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(CollectionInterface():@this:
                 'thisRemoveAll') ;
               RETURN Action(@this:@Collection) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Retain All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P CollectionRetainAll...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(CollectionInterface():@this:
                 'thisRetainAll') ;
               RETURN Action(@this:@Collection) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Size
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P CollectionSize...
     P                 B
     D                 PI            10I 0
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR            10I 0 EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(CollectionInterface():@this:
                 'thisSize') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀCollection: Convert To Array
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P CollectionToArray...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(CollectionInterface():@this:
                 'thisToArray') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀComparator: Interface definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ComparatorInterface...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *
      *ÀInterface Definition Template
     D #template       DS                  QUALIFIED
     D                               16A   INZ('*IFACE*TEMPLATE*')
     D                              126A   VARYING INZ(
     D                                     'Comparator')
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               10I 0 INZ(%Size(#template))
     D                                8A
      *
     D                              126A   VARYING INZ(
     D                                     'extendsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     extendsComparator))
      *
     D                              126A   VARYING INZ(
     D                                     'castThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     castComparator))
      *
     D                              126A   VARYING INZ(
     D                                     'instanceOfThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     instanceOfComparator))
      *
     D                              126A   VARYING INZ(
     D                                     'implementsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     implementsComparator))
      *
     D                              126A   VARYING INZ(
     D                                     'thisDlt')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ComparatorDlt))
      *
     D                              126A   VARYING INZ(
     D                                     'thisCompare')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ComparatorCompare))
      *
     D                              126A   VARYING INZ(
     D                                     'thisEquals')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ComparatorEquals))
      *À
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀBuild interface definition
            @this= newInterface(#template) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀComparator: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P extendsComparator...
     P                 B
     D                 PI
     D  @Interface                     *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceExtends(ComparatorInterface():
                 @Interface) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀComparator: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P castComparator...
     P                 B
     D                 PI
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceCast(ComparatorInterface():
                 @this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀComparator: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P instanceOfComparator...
     P                 B
     D                 PI              N
     D  @Object                        *   CONST
      *À
      /free

         //ÀFinished
            RETURN (
              InterfaceInstanceOf(
                ComparatorInterface():
                @Object) = INTERFACE_INSTANCE_EXACT_MATCH) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀComparator: Implements
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P implementsComparator...
     P                 B
     D                 PI
     D  @Class                         *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceImplements(ComparatorInterface():
                 @Class) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀComparator: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ComparatorDlt...
     P                 B
     D                 PI              *
     D  @this                          *
      *À
      /free

         //ÀMust be correct type
            InterfaceCast(ComparatorInterface():@this) ;

         //ÀFinished
            RETURN ObjectDlt(@this) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀComparator: Compare
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ComparatorCompare...
     P                 B
     D                 PI            10I 0
     D  @this                          *   CONST
     D  @ObjectA                       *   CONST
     D  @ObjectB                       *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR            10I 0 EXTPROC(@Action)
     D  @this                          *   CONST
     D  @ObjectA                       *   CONST
     D  @ObjectB                       *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 ComparatorInterface():
                 @this:
                 'thisCompare') ;
               RETURN Action(@this:@ObjectA:@ObjectB) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀComparator: Equals
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ComparatorEquals...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @that                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @that                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 ComparatorInterface():
                 @this:
                 'thisEquals') ;
               RETURN Action(@this:@that) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: Interface definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ListInterface...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *
      *ÀInterface Definition Template
     D #template       DS                  QUALIFIED
     D                               16A   INZ('*IFACE*TEMPLATE*')
     D                              126A   VARYING INZ(
     D                                     'List')
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               10I 0 INZ(%Size(#template))
     D                                8A
      *
     D                              126A   VARYING INZ(
     D                                     'extendsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     extendsList))
      *
     D                              126A   VARYING INZ(
     D                                     'castThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     castList))
      *
     D                              126A   VARYING INZ(
     D                                     'instanceOfThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     instanceOfList))
      *
     D                              126A   VARYING INZ(
     D                                     'implementsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     implementsList))
      *
     D                              126A   VARYING INZ(
     D                                     'thisDlt')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ListDlt))
      *
     D                              126A   VARYING INZ(
     D                                     'thisAdd')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ListAdd))
      *
     D                              126A   VARYING INZ(
     D                                     'thisAddAll')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ListAddAll))
      *
     D                              126A   VARYING INZ(
     D                                     'thisIndexOf')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ListIndexOf))
      *
     D                              126A   VARYING INZ(
     D                                     'thisLastIndexOf')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ListLastIndexOf))
      *
     D                              126A   VARYING INZ(
     D                                     'thisNewListIterator')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ListNewListIterator))
      *
     D                              126A   VARYING INZ(
     D                                     'thisSubList')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ListSubList))
      *À
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀBuild interface definition
            @this= newInterface(#template) ;

         //ÀExtends Collection interface
            extendsCollection(@this) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P extendsList...
     P                 B
     D                 PI
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceExtends(ListInterface():@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P castList...
     P                 B
     D                 PI
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceCast(ListInterface():@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P instanceOfList...
     P                 B
     D                 PI              N
     D  @Object                        *   CONST
      *À
      /free

         //ÀFinished
            RETURN (
              InterfaceInstanceOf(
                ListInterface():
                @Object) = INTERFACE_INSTANCE_EXACT_MATCH) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: Implements
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P implementsList...
     P                 B
     D                 PI
     D  @Class                         *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceImplements(ListInterface():@Class) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ListDlt...
     P                 B
     D                 PI              *
     D  @this                          *
      *À
      /free

         //ÀMust be correct type
            InterfaceCast(ListInterface():@this) ;

         //ÀFinished
            RETURN ObjectDlt(@this) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: Add
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ListAdd...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @Element                       *   CONST
     D  Index                        10I 0 CONST OPTIONS(*NOPASS)
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Element                       *   CONST
     D  Index                        10I 0 CONST OPTIONS(*NOPASS)
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(ListInterface():@this:
                 'thisAdd') ;
               IF (%Parms() >= 3) ;
                  RETURN Action(@this:@Element:Index) ;
               ELSE ;
                  RETURN Action(@this:@Element) ;
               ENDIF ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: Add All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ListAddAll...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @Collection                    *   CONST
     D  Index                        10I 0 CONST OPTIONS(*NOPASS)
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Collection                    *   CONST
     D  Index                        10I 0 CONST OPTIONS(*NOPASS)
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(ListInterface():@this:
                 'thisAddAll') ;
               IF (%Parms() >= 3) ;
                  RETURN Action(@this:@Collection:Index) ;
               ELSE ;
                  RETURN Action(@this:@Collection) ;
               ENDIF ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: Index Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ListIndexOf...
     P                 B
     D                 PI            10I 0
     D  @this                          *   CONST
     D  @Object                        *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR            10I 0 EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Object                        *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(ListInterface():@this:
                 'thisIndexOf') ;
               RETURN Action(@this:@Object) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: Last Index Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ListLastIndexOf...
     P                 B
     D                 PI            10I 0
     D  @this                          *   CONST
     D  @Object                        *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR            10I 0 EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Object                        *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(ListInterface():@this:
                 'thisLastIndexOf') ;
               RETURN Action(@this:@Object) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: New ListIterator
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ListNewListIterator...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
     D  Index                        10I 0 CONST OPTIONS(*NOPASS)
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
     D  Index                        10I 0 CONST OPTIONS(*NOPASS)
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(ListInterface():@this:
                 'thisNewListIterator') ;
               IF (%Parms() >= 2) ;
                  RETURN Action(@this:Index) ;
               ELSE ;
                  RETURN Action(@this) ;
               ENDIF ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀList: SubList
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ListSubList...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
     D  FromIndex                    10I 0 CONST
     D  ToIndex                      10I 0 CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
     D  FromIndex                    10I 0 CONST
     D  ToIndex                      10I 0 CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(ListInterface():@this:
                 'thisSubList') ;
               RETURN Action(@this:FromIndex:ToIndex) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Interface definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ListIteratorInterface...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *
      *ÀInterface Definition Template
     D #template       DS                  QUALIFIED
     D                               16A   INZ('*IFACE*TEMPLATE*')
     D                              126A   VARYING INZ(
     D                                     'ListIterator')
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               10I 0 INZ(%Size(#template))
     D                                8A
      *
     D                              126A   VARYING INZ(
     D                                     'extendsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     extendsListIterator))
      *
     D                              126A   VARYING INZ(
     D                                     'castThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     castListIterator))
      *
     D                              126A   VARYING INZ(
     D                                     'instanceOfThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     instanceOfListIterator))
      *
     D                              126A   VARYING INZ(
     D                                     'implementsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     implementsListIterator))
      *
     D                              126A   VARYING INZ(
     D                                     'thisDlt')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ListIteratorDlt))
      *
     D                              126A   VARYING INZ(
     D                                     'thisAdd')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ListIteratorAdd))
      *
     D                              126A   VARYING INZ(
     D                                     'thisChg')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ListIteratorChg))
      *
     D                              126A   VARYING INZ(
     D                                     'thisHasNext')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ListIteratorHasNext))
      *
     D                              126A   VARYING INZ(
     D                                     'thisHasPrevious')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ListIteratorHasPrevious))
      *
     D                              126A   VARYING INZ(
     D                                     'thisNext')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ListIteratorNext))
      *
     D                              126A   VARYING INZ(
     D                                     'thisNextIndex')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ListIteratorNextIndex))
      *
     D                              126A   VARYING INZ(
     D                                     'thisPrevious')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ListIteratorPrevious))
      *
     D                              126A   VARYING INZ(
     D                                     'thisPreviousIndex')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ListIteratorPreviousIndex))
      *
     D                              126A   VARYING INZ(
     D                                     'thisRemove')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     ListIteratorRemove))
      *
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀBuild interface definition
            @this= newInterface(#template) ;

         //ÀExtend Iterator interface
            extendsIterator(@this) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P extendsListIterator...
     P                 B
     D                 PI
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceExtends(ListIteratorInterface():@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P castListIterator...
     P                 B
     D                 PI
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceCast(ListIteratorInterface():@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P instanceOfListIterator...
     P                 B
     D                 PI              N
     D  @Object                        *   CONST
      *À
      /free

         //ÀFinished
            RETURN (
              InterfaceInstanceOf(
                ListIteratorInterface():
                @Object) = INTERFACE_INSTANCE_EXACT_MATCH) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Implements
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P implementsListIterator...
     P                 B
     D                 PI
     D  @Class                         *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceImplements(ListIteratorInterface():@Class) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ListIteratorDlt...
     P                 B
     D                 PI              *
     D  @this                          *
      *À
      /free

         //ÀMust be correct type
            InterfaceCast(ListIteratorInterface():@this) ;

         //ÀFinished
            RETURN ObjectDlt(@this) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Add
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ListIteratorAdd...
     P                 B
     D                 PI
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR                  EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(ListIteratorInterface():
                 @this:'thisAdd') ;
               Action(@this:@Element) ;
               RETURN ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Change
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ListIteratorChg...
     P                 B
     D                 PI
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR                  EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(ListIteratorInterface():
                 @this:'thisChg') ;
               Action(@this:@Element) ;
               RETURN ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: HasNext
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ListIteratorHasNext...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(ListIteratorInterface():
                 @this:'thisHasNext') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: HasPrevious
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ListIteratorHasPrevious...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(ListIteratorInterface():@this:
                 'thisHasPrevious') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Next
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ListIteratorNext...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(ListIteratorInterface():
                 @this:'thisNext') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Next Index
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ListIteratorNextIndex...
     P                 B
     D                 PI            10I 0
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR            10I 0 EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(ListIteratorInterface():@this:
                 'thisNextIndex') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Previous
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ListIteratorPrevious...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(ListIteratorInterface():
                 @this:'thisPrevious') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Previous Index
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ListIteratorPreviousIndex...
     P                 B
     D                 PI            10I 0
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR            10I 0 EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(ListIteratorInterface():@this:
                 'thisPreviousIndex') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀListIterator: Remove
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P ListIteratorRemove...
     P                 B
     D                 PI
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR                  EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(ListIteratorInterface():
                 @this:'thisRemove') ;
               Action(@this) ;
               RETURN ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Interface definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SetInterface...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *
      *ÀInterface Definition Template
     D #template       DS                  QUALIFIED
     D                               16A   INZ('*IFACE*TEMPLATE*')
     D                              126A   VARYING INZ(
     D                                     'Set')
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               10I 0 INZ(%Size(#template))
     D                                8A
      *
     D                              126A   VARYING INZ(
     D                                     'extendsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     extendsSet))
      *
     D                              126A   VARYING INZ(
     D                                     'castThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     castSet))
      *
     D                              126A   VARYING INZ(
     D                                     'instanceOfThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     instanceOfSet))
      *
     D                              126A   VARYING INZ(
     D                                     'implementsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     implementsSet))
      *
     D                              126A   VARYING INZ(
     D                                     'thisDlt')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SetDlt))
      *
     D                              126A   VARYING INZ(
     D                                     'thisAdd')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SetAdd))
      *
     D                              126A   VARYING INZ(
     D                                     'thisAddAll')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SetAddAll))
      *
     D                              126A   VARYING INZ(
     D                                     'thisClear')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SetClear))
      *
     D                              126A   VARYING INZ(
     D                                     'thisContains')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SetContains))
      *
     D                              126A   VARYING INZ(
     D                                     'thisContainsAll')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SetContainsAll))
      *
     D                              126A   VARYING INZ(
     D                                     'thisEquals')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SetEquals))
      *
     D                              126A   VARYING INZ(
     D                                     'thisHashCode')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SetHashCode))
      *
     D                              126A   VARYING INZ(
     D                                     'thisIsEmpty')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SetIsEmpty))
      *
     D                              126A   VARYING INZ(
     D                                     'thisNewIterator')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SetNewIterator))
      *
     D                              126A   VARYING INZ(
     D                                     'thisRemove')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SetRemove))
      *
     D                              126A   VARYING INZ(
     D                                     'thisRemoveAll')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SetRemoveAll))
      *
     D                              126A   VARYING INZ(
     D                                     'thisRetainAll')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SetRetainAll))
      *
     D                              126A   VARYING INZ(
     D                                     'thisSize')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SetSize))
      *
     D                              126A   VARYING INZ(
     D                                     'thisToArray')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SetToArray))
      *À
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀBuild interface definition
            @this= newInterface(#template) ;

         //ÀExtends Iterable interface
            extendsIterable(@this) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P extendsSet...
     P                 B
     D                 PI
     D  @Interface                     *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceExtends(SetInterface():
                 @Interface) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P castSet...
     P                 B
     D                 PI
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceCast(SetInterface():@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P instanceOfSet...
     P                 B
     D                 PI              N
     D  @Object                        *   CONST
      *À
      /free

         //ÀFinished
            RETURN (
              InterfaceInstanceOf(
                SetInterface():
                @Object) = INTERFACE_INSTANCE_EXACT_MATCH) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Implements
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P implementsSet...
     P                 B
     D                 PI
     D  @Class                         *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceImplements(SetInterface():@Class) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SetDlt...
     P                 B
     D                 PI              *
     D  @this                          *
      *À
      /free

         //ÀMust be correct type
            InterfaceCast(SetInterface():@this) ;

         //ÀFinished
            RETURN ObjectDlt(@this) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Add
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SetAdd...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N
     D                                     EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                  SetInterface():
                  @this:
                  'thisAdd') ;
               RETURN Action(@this:@Element) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Add All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SetAddAll...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 SetInterface():
                 @this:
                 'thisAddAll') ;
               RETURN Action(@this:@Collection) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Clear
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SetClear...
     P                 B
     D                 PI
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR                  EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 SetInterface():
                 @this:
                 'thisClear') ;
               Action(@this) ;
               RETURN ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Contains
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SetContains...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 SetInterface():
                 @this:
                 'thisContains') ;
               RETURN Action(@this:@Element) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Contains All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SetContainsAll...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(SetInterface():@this:
                 'thisContainsAll') ;
               RETURN Action(@this:@Collection) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Equals
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SetEquals...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @that                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @that                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(SetInterface():@this:
                 'thisEquals') ;
               RETURN Action(@this:@that) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Retrieve HashCode
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SetHashCode...
     P                 B
     D                 PI            10I 0
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR            10I 0 EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(SetInterface():@this:
                 'thisHashCode') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Is Empty
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SetIsEmpty...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(SetInterface():@this:
                 'thisIsEmpty') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: New Iterator
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SetNewIterator...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(SetInterface():@this:
                 'thisNewIterator') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Remove
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SetRemove...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Element                       *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(SetInterface():@this:
                 'thisRemove') ;
               RETURN Action(@this:@Element) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Remove All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SetRemoveAll...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(SetInterface():@this:
                 'thisRemoveAll') ;
               RETURN Action(@this:@Collection) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Retain All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SetRetainAll...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Collection                    *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(SetInterface():@this:
                 'thisRetainAll') ;
               RETURN Action(@this:@Collection) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Size
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SetSize...
     P                 B
     D                 PI            10I 0
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR            10I 0 EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(SetInterface():@this:
                 'thisSize') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSet: Convert To Array
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SetToArray...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(SetInterface():@this:
                 'thisToArray') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Interface definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapInterface...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *
      *ÀInterface Definition Template
     D #template       DS                  QUALIFIED
     D                               16A   INZ('*IFACE*TEMPLATE*')
     D                              126A   VARYING INZ(
     D                                     'Map')
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               10I 0 INZ(%Size(#template))
     D                                8A
      *
     D                              126A   VARYING INZ(
     D                                     'extendsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     extendsMap))
      *
     D                              126A   VARYING INZ(
     D                                     'castThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     castMap))
      *
     D                              126A   VARYING INZ(
     D                                     'instanceOfThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     instanceOfMap))
      *
     D                              126A   VARYING INZ(
     D                                     'implementsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     implementsMap))
      *
     D                              126A   VARYING INZ(
     D                                     'thisDlt')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapDlt))
      *
     D                              126A   VARYING INZ(
     D                                     'thisClear')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapClear))
      *
     D                              126A   VARYING INZ(
     D                                     'thisContainsKey')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapContainsKey))
      *
     D                              126A   VARYING INZ(
     D                                     'thisContainsValue')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapContainsValue))
      *
     D                              126A   VARYING INZ(
     D                                     'thisEntrySet')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapEntrySet))
      *
     D                              126A   VARYING INZ(
     D                                     'thisEquals')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapEquals))
      *
     D                              126A   VARYING INZ(
     D                                     'thisGet')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapGet))
      *
     D                              126A   VARYING INZ(
     D                                     'thisHashCode')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapHashCode))
      *
     D                              126A   VARYING INZ(
     D                                     'thisIsEmpty')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapIsEmpty))
      *
     D                              126A   VARYING INZ(
     D                                     'thisKeySet')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapKeySet))
      *
     D                              126A   VARYING INZ(
     D                                     'thisPut')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapPut))
      *
     D                              126A   VARYING INZ(
     D                                     'thisPutAll')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapPutAll))
      *
     D                              126A   VARYING INZ(
     D                                     'thisRemove')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapRemove))
      *
     D                              126A   VARYING INZ(
     D                                     'thisSize')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapSize))
      *
     D                              126A   VARYING INZ(
     D                                     'thisValues')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapValues))
      *
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀBuild interface definition
            @this= newInterface(#template) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P extendsMap...
     P                 B
     D                 PI
     D  @Interface                     *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceExtends(MapInterface():
                 @Interface) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P castMap...
     P                 B
     D                 PI
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceCast(MapInterface():@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P instanceOfMap...
     P                 B
     D                 PI              N
     D  @Object                        *   CONST
      *À
      /free

         //ÀFinished
            RETURN (
              InterfaceInstanceOf(
                MapInterface():
                @Object) = INTERFACE_INSTANCE_EXACT_MATCH) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Implements
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P implementsMap...
     P                 B
     D                 PI
     D  @Class                         *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceImplements(MapInterface():@Class) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapDlt...
     P                 B
     D                 PI              *
     D  @this                          *
      *À
      /free

         //ÀMust be correct type
            InterfaceCast(MapInterface():@this) ;

         //ÀFinished
            RETURN ObjectDlt(@this) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Clear
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapClear...
     P                 B
     D                 PI
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR                  EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 MapInterface():
                 @this:
                 'thisClear') ;
               Action(@this) ;
               RETURN ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Contains Key
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapContainsKey...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @Object                        *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Object                        *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 MapInterface():
                 @this:
                 'thisContainsKey') ;
               RETURN Action(@this:@Object) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Contains Value
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapContainsValue...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @Object                        *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Object                        *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 MapInterface():
                 @this:
                 'thisContainsValue') ;
               RETURN Action(@this:@Object) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Entry Set
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapEntrySet...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 MapInterface():
                 @this:
                 'thisEntrySet') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Equals
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapEquals...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @that                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @that                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 MapInterface():
                 @this:
                 'thisEquals') ;
               RETURN Action(@this:@that) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Get
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapGet...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
     D  @Key                           *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Key                           *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 MapInterface():
                 @this:
                 'thisGet') ;
               RETURN Action(@this:@Key) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Retrieve HashCode
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapHashCode...
     P                 B
     D                 PI            10I 0
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR            10I 0 EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(MapInterface():@this:
                 'thisHashCode') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Is Empty
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapIsEmpty...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(MapInterface():@this:
                 'thisIsEmpty') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Key Set
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapKeySet...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 MapInterface():
                 @this:
                 'thisKeySet') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Put
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapPut...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
     D  @Key                           *   CONST
     D  @Value                         *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Key                           *   CONST
     D  @Value                         *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 MapInterface():
                 @this:
                 'thisPut') ;
               RETURN Action(@this:@Key:@Value) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Put All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapPutAll...
     P                 B
     D                 PI
     D  @this                          *   CONST
     D  @Map                           *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Map                           *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 MapInterface():
                 @this:
                 'thisPutAll') ;
               Action(@this:@Map) ;
               RETURN ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Remove
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapRemove...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
     D  @Key                           *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Key                           *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 MapInterface():
                 @this:
                 'thisRemove') ;
               RETURN Action(@this:@Key) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Size
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapSize...
     P                 B
     D                 PI            10I 0
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR            10I 0 EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(MapInterface():@this:
                 'thisSize') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMap: Values
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapValues...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 MapInterface():
                 @this:
                 'thisValues') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: Interface definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapEntryInterface...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *
      *ÀInterface Definition Template
     D #template       DS                  QUALIFIED
     D                               16A   INZ('*IFACE*TEMPLATE*')
     D                              126A   VARYING INZ(
     D                                     'MapEntry')
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               10I 0 INZ(%Size(#template))
     D                                8A
      *
     D                              126A   VARYING INZ(
     D                                     'extendsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     extendsMapEntry))
      *
     D                              126A   VARYING INZ(
     D                                     'castThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     castMapEntry))
      *
     D                              126A   VARYING INZ(
     D                                     'instanceOfThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     instanceOfMapEntry))
      *
     D                              126A   VARYING INZ(
     D                                     'implementsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     implementsMapEntry))
      *
     D                              126A   VARYING INZ(
     D                                     'thisDlt')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapEntryDlt))
      *
     D                              126A   VARYING INZ(
     D                                     'thisEquals')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapEntryEquals))
      *
     D                              126A   VARYING INZ(
     D                                     'thisGetKey')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapEntryGetKey))
      *
     D                              126A   VARYING INZ(
     D                                     'thisGetValue')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapEntryGetValue))
      *
     D                              126A   VARYING INZ(
     D                                     'thisHashCode')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapEntryHashCode))
      *
     D                              126A   VARYING INZ(
     D                                     'thisSetValue')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     MapEntrySetValue))
      *À
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀBuild interface definition
            @this= newInterface(#template) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P extendsMapEntry...
     P                 B
     D                 PI
     D  @Interface                     *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceExtends(MapEntryInterface():
                 @Interface) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P castMapEntry...
     P                 B
     D                 PI
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceCast(MapEntryInterface():
                 @this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P instanceOfMapEntry...
     P                 B
     D                 PI              N
     D  @Object                        *   CONST
      *À
      /free

         //ÀFinished
            RETURN (
              InterfaceInstanceOf(
                MapEntryInterface():
                @Object) = INTERFACE_INSTANCE_EXACT_MATCH) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: Implements
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P implementsMapEntry...
     P                 B
     D                 PI
     D  @Class                         *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceImplements(MapEntryInterface():
                 @Class) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapEntryDlt...
     P                 B
     D                 PI              *
     D  @this                          *
      *À
      /free

         //ÀMust be correct type
            InterfaceCast(MapEntryInterface():@this) ;

         //ÀFinished
            RETURN ObjectDlt(@this) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: Equals
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapEntryEquals...
     P                 B
     D                 PI              N
     D  @this                          *   CONST
     D  @that                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              N   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @that                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 MapEntryInterface():
                 @this:
                 'thisEquals') ;
               RETURN Action(@this:@that) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: GetKey
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapEntryGetKey...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(MapEntryInterface():@this:
                 'thisGetKey') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: GetValue
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapEntryGetValue...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(MapEntryInterface():@this:
                 'thisGetValue') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: HashCode
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapEntryHashCode...
     P                 B
     D                 PI            10I 0
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR            10I 0 EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(MapEntryInterface():@this:
                 'thisHashCode') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀMapEntry: SetValue
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P MapEntrySetValue...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
     D  @Value                         *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @Value                         *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(MapEntryInterface():@this:
                 'thisSetValue') ;
               RETURN Action(@this:@Value) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Class definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsColClass...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *
      *ÀClass Definition Template
     D #template       DS                  QUALIFIED
     D                               16A   INZ('*CLASS*TEMPLATE*')
     D                              126A   VARYING INZ(
     D                                     'AbstractCollection')
     D                               10I 0 INZ(ACCESS_PUB_ABS)
     D                               10I 0 INZ(%Size(#template))
     D                               10I 0 INZ(%Size(AbsCol_))
     D                                4A
      *
     D                              126A   VARYING INZ(
     D                                     'extendsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     extendsAbsCol))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'castThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     castAbsCol))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'instanceOfThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     instanceOfAbsCol))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisDlt')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsColDlt))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisInitialise')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsColInitialise))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisFinalise')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsColFinalise))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisAdd')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsColAdd))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisAddAll')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsColAddAll))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisClear')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsColClear))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisContains')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsColContains))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisContainsAll')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsColContainsAll))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisIsEmpty')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsColIsEmpty))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisNewIterator')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsColNewIterator))
     D                               10I 0 INZ(ACCESS_PUB_ABS)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisRemove')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsColRemove))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisRemoveAll')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsColRemoveAll))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisRetainAll')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsColRetainAll))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisSize')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsColSize))
     D                               10I 0 INZ(ACCESS_PUB_ABS)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisToArray')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsColToArray))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisToString')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsColToString))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *À
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀBuild class definition
            @this= extendsObject(#template) ;

         //ÀInterface
            implementsCollection(@this) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P extendsAbsCol...
     P                 B
     D                 PI              *
     D pTemplate                  65535A   OPTIONS(*VARSIZE)
      *À
      /free

         //ÀFinished
            RETURN ClassExtends(AbsColClass:pTemplate) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P castAbsCol...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
      /free

         //ÀCast as an instance of this class
            RETURN ClassCast(AbsColClass:@) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P instanceOfAbsCol...
     P                 B
     D                 PI              N
     D  @Object                        *   CONST
      *À
      /free

         //ÀFinished
            RETURN (
              ClassInstanceOf(
                AbsColClass():
                @Object) >= CLASS_INSTANCE_EXACT_MATCH) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsColDlt...
     P                 B
     D                 PI              *
     D  @                              *
      *À
      /free

         //ÀInstance be a member of the current class
            ClassInstanceCheck(AbsColClass():@) ;

         //ÀFinished
            RETURN ObjectDlt(@) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Initialise
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsColInitialise...
     P                 B
     D                 PI
     D  @                              *   CONST
      *À
     D @this           S               *
      *À
      /free

         //ÀInvoke superclass method
            @this= superInitialise(AbsColClass():@) ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Finalise
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsColFinalise...
     P                 B
     D                 PI
     D  @                              *   CONST
      *À
     D @this           S               *
      *À
     D @@Element       S               *
     D @Element        S               *   BASED(@@Element)
      *À
     D j               S             10I 0
      *À
      /free

         //ÀCast to this class
            @this= ClassCast(AbsColClass:@) ;

         //ÀInvoke superclass method
            superFinalise(AbsColClass():@this) ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Add
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsColAdd...
     P                 B
     D                 PI              N
     D  @                              *   CONST
     D  @Object                        *   CONST
      *À
      *ÀWork fields
     D @this           S               *
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              N
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
     D  @Object                        *   CONST
      *À
     D DLL0022         DS                  QUALIFIED
     D  ClassName                   126A
     D  Method                      126A
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀLoad error details
            DLL0022.ClassName= 'AbstractCollection' ;
            DLL0022.Method= 'thisAdd' ;

         //ÀError
            Throw(DLL0022:'DLL0022':'DLLMSGF') ;

         //ÀFinished
            RETURN false ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsColClass():@this:
                 'thisAdd') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this:@Object) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Add All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsColAddAll...
     P                 B
     D                 PI              N
     D  @                              *   CONST
     D  @Collection                    *   CONST
      *À
      *ÀWork fields
     D @this           S               *
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              N
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
     D  @Collection                    *   CONST
      *À
     D @Iterator       S               *
     D @Object         S               *
     D Modified        S               N   INZ(false)
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀLoop through collection
            @Iterator= CollectionNewIterator(@Collection) ;
            DOW ForEach(@Iterator:@Object) ;
               IF AbsColAdd(@this:@Object) ;
                  Modified= true ;
               ENDIF ;
            ENDDO ;

         //ÀFinished
            RETURN Modified ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsColClass():@this:
                 'thisAddAll') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this:@Collection) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Clear
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsColClear...
     P                 B
     D                 PI
     D  @                              *   CONST
      *À
      *ÀWork fields
     D @this           S               *
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
      *À
     D @Iterator       S               *
     D @Object         S               *
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀLoop through collection
            @Iterator= AbsColNewIterator(@this) ;
            DOW ForEach(@Iterator:@Object) ;
               IteratorRemove(@Iterator) ;
            ENDDO ;

         //ÀFinished
            RETURN ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsColClass():@this:
                 'thisClear') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  Virtual(@this) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Contains
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsColContains...
     P                 B
     D                 PI              N
     D  @                              *   CONST
     D  @Object                        *   CONST
      *À
      *ÀWork fields
     D @this           S               *
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              N
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
     D  @Object                        *   CONST
      *À
     D @Iterator       S               *
     D @Element        S               *
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀCreate an iterator
            @Iterator= AbsColNewIterator(@this) ;

         //ÀLooking for null
            IF (@Object = null) ;

            //ÀLoop through collection
               DOW ForEach(@Iterator:@Element) ;
                  IF (@Element = null) ;
                     ObjectDlt(@Iterator) ;
                     RETURN true ;
                  ENDIF ;
               ENDDO ;

            ELSE ;

            //ÀLoop through collection
               DOW ForEach(@Iterator:@Element) ;
                  IF ObjectEquals(@Object:@Element) ;
                     ObjectDlt(@Iterator) ;
                     RETURN true ;
                  ENDIF ;
               ENDDO ;

            ENDIF ;

         //ÀFinished
            RETURN false ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsColClass():@this:
                 'thisContains') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this:@Object) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Contains All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsColContainsAll...
     P                 B
     D                 PI              N
     D  @                              *   CONST
     D  @Collection                    *   CONST
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              N
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
     D  @Collection                    *   CONST
      *À
      *ÀWork fields
     D @this           S               *
     D @Iterator       S               *
     D @Object         S               *
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀIterate through collection
            @Iterator= CollectionNewIterator(@Collection) ;
            DOW ForEach(@Iterator:@Object) ;

            //ÀQuit if the object is not present
               IF (AbsColContains(@this:@Object) = false) ;
                  IteratorDlt(@Iterator) ;
                  RETURN false ;
               ENDIF ;

            ENDDO ;

         //ÀFinished
            RETURN true ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsColClass():@this:
                 'thisContainsAll') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this:@Collection) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Is Empty
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsColIsEmpty...
     P                 B
     D                 PI              N
     D  @                              *   CONST
      *À
      /free

           //ÀFinished
              RETURN (AbsColSize(@) = 0) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: New Iterator
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsColNewIterator...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              *   EXTPROC(@Virtual)
     D  @                              *   CONST
      *À
     D @this           S               *
      *À
      /free

           //ÀPick up object pointer
              @this= @ ;

           //ÀAbstract method must be overridden
              @Virtual= ClassRtvVirtual(AbsColClass():@this:
                 'thisNewIterator') ;
              IF (@Virtual = null) ;
                 Throw('Abstract method has no override: '+
                    'thisNewIterator') ;
              ENDIF ;

         //ÀFinished
            RETURN Virtual(@this) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Remove
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsColRemove...
     P                 B
     D                 PI              N
     D  @                              *   CONST
     D  @Object                        *   CONST
      *À
      *ÀWork fields
     D @this           S               *
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              N
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
     D  @Object                        *   CONST
      *À
     D @Iterator       S               *
     D @Element        S               *
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀCreate an iterator
            @Iterator= AbsColNewIterator(@this) ;

         //ÀLooking for null
            IF (@Object = null) ;

            //ÀLoop through collection
               DOW ForEach(@Iterator:@Element) ;
                  IF (@Element = null) ;
                     IteratorRemove(@Iterator) ;
                     ObjectDlt(@Iterator) ;
                     RETURN true ;
                  ENDIF ;
               ENDDO ;

            ELSE ;

            //ÀLoop through collection
               DOW ForEach(@Iterator:@Element) ;
                  IF ObjectEquals(@Object:@Element) ;
                     IteratorRemove(@Iterator) ;
                     ObjectDlt(@Iterator) ;
                     RETURN true ;
                  ENDIF ;
               ENDDO ;

            ENDIF ;

         //ÀFinished
            RETURN false ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsColClass():@this:
                 'thisRemove') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this:@Object) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Remove All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsColRemoveAll...
     P                 B
     D                 PI              N
     D  @                              *   CONST
     D  @Collection                    *   CONST
      *À
      *ÀWork fields
     D @this           S               *
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              N
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
     D  @Collection                    *   CONST
      *À
     D @Iterator       S               *
     D @Object         S               *
     D Modified        S               N   INZ(false)
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀIterate through the collection
            @Iterator= CollectionNewIterator(@Collection) ;
            DOW ForEach(@Iterator:@Object) ;

            //ÀRemove object
               IF AbsColRemove(@this:@Object) ;
                  Modified= true ;
               ENDIF ;

         //ÀNext element
            ENDDO ;

         //ÀFinished
            RETURN Modified ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsColClass():@this:
                 'thisRemoveAll') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this:@Collection) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Retain All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsColRetainAll...
     P                 B
     D                 PI              N
     D  @                              *   CONST
     D  @Collection                    *   CONST
      *À
      *ÀWork fields
     D @this           S               *
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              N
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
     D  @Collection                    *   CONST
      *À
     D @Iterator       S               *
     D @Object         S               *
     D Modified        S               N   INZ(false)
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀIterate through the collection
            @Iterator= AbsColNewIterator(@this) ;
            DOW ForEach(@Iterator:@Object) ;

            //ÀCheck if in the collection
               IF NOT CollectionContains(@Collection:@Object) ;
                  IteratorRemove(@Iterator) ;
                  Modified= true ;
               ENDIF ;

         //ÀLoop for next element
            ENDDO ;

         //ÀFinished
            RETURN Modified ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsColClass():@this:
                 'thisRetainAll') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this:@Collection) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Size
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsColSize...
     P                 B
     D                 PI            10I 0
     D  @                              *   CONST
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR            10I 0 EXTPROC(@Virtual)
     D  @                              *   CONST
      *À
     D @this           S               *
      *À
      /free

           //ÀPick up object pointer
              @this= @ ;

           //ÀAbstract method must be overridden
              @Virtual= ClassRtvVirtual(AbsColClass():@this:
                 'thisSize') ;
              IF (@Virtual = null) ;
                 Throw('Abstract method has no override: '+
                    'thisSize') ;
              ENDIF ;

         //ÀFinished
            RETURN Virtual(@this) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: To Array
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsColToArray...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
      *ÀWork fields
     D @this           S               *
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              *
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
      *À
     D @Iterator       S               *
     D @Element        S               *
     D @Array          S               *
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀInclude as required
            IF (@ClsArray.@newThis = null) ;
               include(@ClsArray) ;
            ENDIF ;

         //ÀCreate an Array
            @Array= newArray() ;

         //ÀCreate an iterator
            @Iterator= AbsColNewIterator(@this) ;

         //ÀLoop through collection
            DOW ForEach(@Iterator:@Element) ;
               ArrayAdd(@Array:@Element) ;
            ENDDO ;

         //ÀFinished
            RETURN @Array ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsColClass():@this:
                 'thisToArray') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsCol: Convert To String
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsColToString...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
      *ÀWork fields
     D @this           S               *
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              *
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
      *À
     D @Iterator       S               *
     D @Object         S               *
     D @Other          S               *
     D @String         S               *
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀInclude as required
            IF (@ClsString.@newThis = null) ;
               include(@ClsString) ;
            ENDIF ;

         //ÀEmpty collection
            IF AbsColIsEmpty(@this) ;
               RETURN newString('<>') ;
            ENDIF ;

         //ÀThe result
            @String= newString('<') ;

         //ÀFetch an Iterator
            @Iterator= AbsColNewIterator(@this) ;

         //ÀMove the pointer for checking purposes
            @this= castObject(@this) ;

         //ÀIterate through the collection
            DOW ForEach(@Iterator:@Object) ;

            //ÀDecide what to do
               SELECT ;

            //ÀNull
               WHEN (@Object = null) ;
                  StringAppend(@String:'null') ;

            //ÀCollection contains itself
               WHEN (@this= castObject(@Object)) ;
                  StringAppend(@String:'(this collection)') ;

            //ÀOtherwise regular entry
               OTHER ;

               //ÀConvert to string and append
                  @Other= ObjectToString(@Object) ;
                  StringAppend(@String:@Other) ;
                  StringDlt(@Other) ;

               ENDSL ;

            //ÀAppend seperator
               IF IteratorHasNext(@Iterator) ;
                  StringAppend(@String:', ') ;
               ENDIF ;

         //ÀLoop
            ENDDO ;

         //ÀClosing bracket
            StringAppend(@String:'>') ;

         //ÀFinished
            RETURN @String ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsColClass():@this:
                 'thisToString') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet: Class definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsSetClass...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *
      *ÀClass Definition Template
     D #template       DS                  QUALIFIED
     D                               16A   INZ('*CLASS*TEMPLATE*')
     D                              126A   VARYING INZ(
     D                                     'AbstractSet')
     D                               10I 0 INZ(ACCESS_PUB_ABS)
     D                               10I 0 INZ(%Size(#template))
     D                               10I 0 INZ(%Size(AbsSet_))
     D                                4A
      *
     D                              126A   VARYING INZ(
     D                                     'extendsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     extendsAbsSet))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'castThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     castAbsSet))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'instanceOfThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     instanceOfAbsSet))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisDlt')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsSetDlt))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisInitialise')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsSetInitialise))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisFinalise')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsSetFinalise))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisEquals')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsSetEquals))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisHashCode')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsSetHashCode))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisRemoveAll')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsSetRemoveAll))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *À
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀBuild class definition
            @this= extendsAbsCol(#template) ;

         //ÀInterface
            implementsSet(@this) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P extendsAbsSet...
     P                 B
     D                 PI              *
     D pTemplate                  65535A   OPTIONS(*VARSIZE)
      *À
      /free

         //ÀFinished
            RETURN ClassExtends(AbsSetClass():pTemplate) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P castAbsSet...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
      /free

         //ÀCast as an instance of this class
            RETURN ClassCast(AbsSetClass():@) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P instanceOfAbsSet...
     P                 B
     D                 PI              N
     D  @Object                        *   CONST
      *À
      /free

         //ÀFinished
            RETURN (
              ClassInstanceOf(
                AbsSetClass():
                @Object) >= CLASS_INSTANCE_EXACT_MATCH) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsSetDlt...
     P                 B
     D                 PI              *
     D  @                              *
      *À
      /free

         //ÀInstance be a member of the current class
            ClassInstanceCheck(AbsSetClass():@) ;

         //ÀFinished
            RETURN ObjectDlt(@) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet: Initialise
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsSetInitialise...
     P                 B
     D                 PI
     D  @                              *   CONST
      *À
     D @this           S               *
      *À
      /free

         //ÀInvoke superclass method
            @this= superInitialise(AbsSetClass():@) ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet: Finalise
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsSetFinalise...
     P                 B
     D                 PI
     D  @                              *   CONST
      *À
     D @this           S               *
      *À
      /free

         //ÀCast to this class
            @this= ClassCast(AbsSetClass():@) ;

         //ÀInvoke superclass method
            superFinalise(AbsSetClass():@this) ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet: Equals
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsSetEquals...
     P                 B
     D                 PI              N
     D  @                              *   CONST
     D  @that                          *   CONST
      *À
      *ÀWork fields
     D @this           S               *
     D this            DS                  LIKEDS(AbsSet_) BASED(@this)
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              N
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
     D  @that                          *   CONST
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀMust be an implementation of the Set interface
            IF (instanceOfSet(@that) = false) ;
               RETURN false ;
            ENDIF ;

         //ÀEqual if same instance
            IF (castObject(@this) = castObject(@that)) ;
               RETURN true ;
            ENDIF ;

         //ÀNot equal if different size
            IF (AbsColSize(@this) <> CollectionSize(@that)) ;
               RETURN false ;
            ENDIF ;

         //ÀWatch for errors
            MONITOR ;

            //ÀConfirm the collection contains everything it should
               RETURN AbsColContainsAll(@this:@that) ;

         //ÀBring all errors here
            ON-ERROR ;

         //ÀHandle specific errors
            SELECT ;

         //ÀNull pointer
            WHEN Catch('DLL0005') ;
               RETURN false ;

         //ÀClass cast failure
            WHEN Catch('DLL0006') ;
               RETURN false ;
            ENDSL ;

         //ÀThrow everything else back to caller
            Throw() ;

            ENDMON ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsSetClass():@this:
                 'thisEquals') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass errors back to caller
               MONITOR ;
                  RETURN Virtual(@this:@that) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;


      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet: HashCode
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsSetHashCode...
     P                 B
     D                 PI            10I 0
     D  @                              *   CONST
      *À
      *ÀWork fields
     D @this           S               *
     D this            DS                  LIKEDS(AbsSet_) BASED(@this)
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR            10I 0
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
      *À
     D @Iterator       S               *
     D @Object         S               *
      *À
     D Hash            DS                  QUALIFIED
     D  All                    1      8I 0
     D  High                   1      4U 0
     D  Low                    5      8I 0
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀInitialise
            Hash.All= 0 ;

         //ÀLoop through collection
            @Iterator= AbsColNewIterator(@this) ;
            DOW ForEach(@Iterator:@Object) ;
               IF (@Object <> null) ;
                  Hash.Low+= ObjectHashCode(@Object) ;
                  Hash.High= 0 ;
               ENDIF ;
            ENDDO ;

         //ÀFinished
            RETURN Hash.Low ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsSetClass():@this:
                 'thisHashCode') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass errors back to caller
               MONITOR ;
                  RETURN Virtual(@this) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsSet: Remove All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsSetRemoveAll...
     P                 B
     D                 PI              N
     D  @                              *   CONST
     D  @Collection                    *   CONST
      *À
      *ÀWork fields
     D @this           S               *
     D this            DS                  LIKEDS(AbsSet_) BASED(@this)
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              N
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
     D  @Collection                    *   CONST
      *À
     D @Iterator       S               *
     D @Object         S               *
     D Modified        S               N   INZ(false)
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀCompare sizes to determine best removal tactic
            IF (AbsColSize(@this) > CollectionSize(@Collection)) ;

            //ÀIterate through the collection
               @Iterator= CollectionNewIterator(@Collection) ;
               DOW ForEach(@Iterator:@Object) ;

               //ÀRemove object
                  Modified= (Modified OR AbsColRemove(@this:@Object)) ;

            //ÀNext element
               ENDDO ;

            ELSE ;

            //ÀIterate through this
               @Iterator= AbsColNewIterator(@this) ;
               DOW ForEach(@Iterator:@Object) ;

               //ÀRemove from this if required
                  IF CollectionContains(@Collection:@Object) ;
                     IteratorRemove(@Iterator) ;
                     Modified= true ;
                  ENDIF ;

            //ÀNext element
               ENDDO ;

            ENDIF ;

         //ÀFinished
            RETURN Modified ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsSetClass():@this:
                 'thisRemoveAll') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this:@Collection) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: Class definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SmpMapEntClass...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *
      *ÀClass Definition Template
     D #template       DS                  QUALIFIED
     D                               16A   INZ('*CLASS*TEMPLATE*')
     D                              126A   VARYING INZ(
     D                                     'SimpleEntry')
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               10I 0 INZ(%Size(#template))
     D                               10I 0 INZ(%Size(SmpMapEnt_))
     D                                4A
      *
     D                              126A   VARYING INZ(
     D                                     'extendsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     extendsSmpMapEnt))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'castThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     castSmpMapEnt))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'instanceOfThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     instanceOfSmpMapEnt))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'newThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     newSmpMapEnt))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisDlt')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SmpMapEntDlt))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisInitialise')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SmpMapEntInitialise))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisFinalise')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SmpMapEntFinalise))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisEquals')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SmpMapEntEquals))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisGetKey')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SmpMapEntGetKey))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisGetValue')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SmpMapEntGetValue))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisHashCode')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SmpMapEntHashCode))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisSetValue')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SmpMapEntSetValue))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisToString')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SmpMapEntToString))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisToVarying')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SmpMapEntToVarying))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *À
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀBuild class definition
            @this= extendsObject(#template) ;

         //ÀInterface
            implementsMapEntry(@this) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P extendsSmpMapEnt...
     P                 B
     D                 PI              *
     D pTemplate                  65535A   OPTIONS(*VARSIZE)
      *À
      /free

         //ÀFinished
            RETURN ClassExtends(SmpMapEntClass():pTemplate) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P castSmpMapEnt...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
      /free

         //ÀCast as an instance of this class
            RETURN ClassCast(SmpMapEntClass():@) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P instanceOfSmpMapEnt...
     P                 B
     D                 PI              N
     D  @Object                        *   CONST
      *À
      /free

         //ÀFinished
            RETURN (
              ClassInstanceOf(
                SmpMapEntClass():
                @Object) >= CLASS_INSTANCE_EXACT_MATCH) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: New
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P newSmpMapEnt...
     P                 B
     D                 PI              *
     D  o@Parm1                        *   CONST OPTIONS(*NOPASS)
     D  o@Parm2                        *   CONST OPTIONS(*NOPASS)
      *À
     D @this           S               *
     D this            DS                  LIKEDS(SmpMapEnt_) BASED(@this)
      *À
     D @Key            S               *
     D @Value          S               *
      *À
      /free

         //ÀForm a new instance of this class
            @this= ClassNewInstance(SmpMapEntClass()) ;

         //ÀCheck optional parameters
            SELECT ;

         //ÀExit if no optional parameters
            WHEN (%Parms() = 0) ;
               RETURN @this ;

         //ÀOnly 1 parameter - must be a MapEntry
            WHEN (%Parms() = 1) ;
               castMapEntry(o@Parm1) ;
               @Key= MapEntryGetKey(o@Parm1) ;
               @Value= MapEntryGetValue(o@Parm1) ;

         //À2 parameters - must be Key and Value
            WHEN (%Parms() = 2) ;
               @Key= o@Parm1 ;
               @Value= o@Parm2 ;

            ENDSL ;

         //ÀInitialise
            Assign(this.@Key:@Key) ;
            Assign(this.@Value:@Value) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SmpMapEntDlt...
     P                 B
     D                 PI              *
     D  @                              *
      *À
      /free

         //ÀInstance be a member of the current class
            ClassInstanceCheck(SmpMapEntClass():@) ;

         //ÀFinished
            RETURN ObjectDlt(@) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: Initialise
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SmpMapEntInitialise...
     P                 B
     D                 PI
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(SmpMapEnt_) BASED(@this)
      *À
      /free

         //ÀInvoke superclass method
            @this= superInitialise(SmpMapEntClass():@) ;

         //ÀInitialise
            this.@Key= null ;
            this.@Value= null ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: Finalise
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SmpMapEntFinalise...
     P                 B
     D                 PI
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(SmpMapEnt_) BASED(@this)
      *À
      /free

         //ÀCast to this class
            @this= ClassCast(SmpMapEntClass():@) ;

         //ÀFinished
            ReleaseDlt(this.@Key) ;
            ReleaseDlt(this.@Value) ;

         //ÀInvoke superclass method
            superFinalise(SmpMapEntClass():@this) ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: Equals
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SmpMapEntEquals...
     P                 B
     D                 PI              N
     D  @                              *   CONST
     D  @that                          *   CONST
      *À
      *ÀWork fields
     D @this           S               *
     D this            DS                  LIKEDS(SmpMapEnt_) BASED(@this)
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              N
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
     D  @that                          *   CONST
      *À
     D @Key            S               *
     D @Value          S               *
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀMust be an implementation of the Set interface
            IF (instanceOfMapEntry(@that) = false) ;
               RETURN false ;
            ENDIF ;

         //ÀFetch Key and Value
            @Key= MapEntryGetKey(@that) ;
            @Value= MapEntryGetKey(@that) ;

         //ÀFinished
            RETURN (Eq(this.@Key:@Key) AND Eq(this.@Value:@Value)) ;


         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(SmpMapEntClass():@this:
                 'thisEquals') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass errors back to caller
               MONITOR ;
                  RETURN Virtual(@this:@that) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;


      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: GetKey
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SmpMapEntGetKey...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              *   EXTPROC(@Virtual)
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(SmpMapEnt_) BASED(@this)
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀFinished
            RETURN this.@Key ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(SmpMapEntClass():@this:
                 'thisGetKey') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;


      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: GetValue
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SmpMapEntGetValue...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              *   EXTPROC(@Virtual)
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(SmpMapEnt_) BASED(@this)
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀFinished
            RETURN this.@Value ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(SmpMapEntClass():@this:
                 'thisGetValue') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;


      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: HashCode
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SmpMapEntHashCode...
     P                 B
     D                 PI            10I 0
     D  @                              *   CONST
      *À
      *ÀWork fields
     D @this           S               *
     D this            DS                  LIKEDS(SmpMapEnt_) BASED(@this)
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR            10I 0
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
      *À
     D HashKey         S             10I 0 INZ(0)
     D HashValue       S             10I 0 INZ(0)
     D Hash            S             10I 0
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀHash if not null
            IF (this.@Key <> null) ;
               HashKey= ObjectHashCode(this.@Key) ;
            ENDIF ;

         //ÀHash if not null
            IF (this.@Value <> null) ;
               HashValue= ObjectHashCode(this.@Value) ;
            ENDIF ;

         //ÀForm result
            Hash= %BitXOR(HashKey:HashValue) ;

         //ÀFinished
            RETURN Hash ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(SmpMapEntClass():@this:
                 'thisHashCode') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass errors back to caller
               MONITOR ;
                  RETURN Virtual(@this) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: SetValue
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SmpMapEntSetValue...
     P                 B
     D                 PI              *
     D  @                              *   CONST
     D  @Value                         *   CONST
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              *   EXTPROC(@Virtual)
     D  @                              *   CONST
     D  @Value                         *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(SmpMapEnt_) BASED(@this)
      *À
     D @OldValue       S               *
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀCopy out old value
            @OldValue= this.@Value ;

         //ÀCopy in new value
            Assign(this.@Value:@Value) ;

         //ÀFinished
            RETURN @OldValue ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(SmpMapEntClass():@this:
                 'thisSetValue') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this:@Value) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;


      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: To String
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SmpMapEntToString...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
      *ÀWork fields
     D @this           S               *
     D this            DS                  LIKEDS(SmpMapEnt_) BASED(@this)
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              *
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
      *À
     D @String         S               *
     D @s              S               *
     D @t              S               *
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀLoad the String class as required
            IF (@ClsString.@newThis = null) ;
               include(@ClsString) ;
            ENDIF ;

         //ÀCreate a String
            @String= newString() ;

         //ÀSet up an object pool
            Pool() ;

         //ÀUse 'null' or a string version of the key
            IF (this.@Key = null) ;
               StringAppend(@String:'null') ;
            ELSE ;
               @s= ObjectToString(this.@Key) ;
               StringAppend(@String:@s) ;
            ENDIF ;

         //ÀResult will be in the form 'key=value'
            StringAppend(@String:'=') ;

         //ÀUse 'null' or a string version of the value
            IF (this.@Value = null) ;
               StringAppend(@String:'null') ;
            ELSE ;
               @t= ObjectToString(this.@Value) ;
               StringAppend(@String:@t) ;
            ENDIF ;

         //ÀDrain object pool
            Drain() ;

         //ÀFinished
            RETURN @String ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(SmpMapEntClass():@this:
                 'thisToString') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass errors back to caller
               MONITOR ;
                  RETURN Virtual(@this) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpMapEnt: To Varying
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SmpMapEntToVarying...
     P                 B
     D                 PI           510A   VARYING
     D  @                              *   CONST
      *À
      *ÀWork fields
     D @this           S               *
     D this            DS                  LIKEDS(SmpMapEnt_) BASED(@this)
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR           510A   VARYING
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
      *À
     D @String         S               *
     D Varying         S            510A   VARYING
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀCreate a String
            @String= SmpMapEntToString(@this) ;

         //ÀForm the varying version
            Varying= StringToVarying(@String) ;

         //ÀTidy up
            StringDlt(@String) ;

         //ÀFinished
            RETURN Varying ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(SmpMapEntClass():@this:
                 'thisToVarying') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass errors back to caller
               MONITOR ;
                  RETURN Virtual(@this) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Class definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapClass...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *
      *ÀClass Definition Template
     D #template       DS                  QUALIFIED
     D                               16A   INZ('*CLASS*TEMPLATE*')
     D                              126A   VARYING INZ(
     D                                     'AbstractMap')
     D                               10I 0 INZ(ACCESS_PUB_ABS)
     D                               10I 0 INZ(%Size(#template))
     D                               10I 0 INZ(%Size(AbsMap_))
     D                                4A
      *
     D                              126A   VARYING INZ(
     D                                     'extendsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     extendsAbsMap))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'castThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     castAbsMap))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'instanceOfThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     instanceOfAbsMap))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisDlt')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapDlt))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisInitialise')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapInitialise))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisFinalise')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapFinalise))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisClear')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapClear))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisClone')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapClone))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisContainsKey')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapContainsKey))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisContainsValue')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapContainsValue))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisEntrySet')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapEntrySet))
     D                               10I 0 INZ(ACCESS_PUB_ABS)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisEquals')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapEquals))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisGet')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapGet))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisHashCode')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapHashCode))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisIsEmpty')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapIsEmpty))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisKeySet')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapKeySet))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisPut')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapPut))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisPutAll')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapPutAll))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisRemove')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapRemove))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisSize')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapSize))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisToString')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapToString))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisToVarying')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapToVarying))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisValues')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapValues))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'AbstractMapGetFld@KeySet')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapMntFld@KeySet))
     D                               10I 0 INZ(ACCESS_PUB_FIN)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'AbstractMapSetFld@KeySet')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapMntFld@KeySet))
     D                               10I 0 INZ(ACCESS_PUB_FIN)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'AbstractMapGetFld@Values')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapMntFld@Values))
     D                               10I 0 INZ(ACCESS_PUB_FIN)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'AbstractMapSetFld@Values')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     AbsMapMntFld@Values))
     D                               10I 0 INZ(ACCESS_PUB_FIN)
     D                               12A
      *À
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀBuild class definition
            @this= extendsObject(#template) ;

         //ÀInterface
            implementsMap(@this) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P extendsAbsMap...
     P                 B
     D                 PI              *
     D pTemplate                  65535A   OPTIONS(*VARSIZE)
      *À
      /free

         //ÀFinished
            RETURN ClassExtends(AbsMapClass():pTemplate) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P castAbsMap...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
      /free

         //ÀCast as an instance of this class
            RETURN ClassCast(AbsMapClass():@) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P instanceOfAbsMap...
     P                 B
     D                 PI              N
     D  @Object                        *   CONST
      *À
      /free

         //ÀFinished
            RETURN (
              ClassInstanceOf(
                AbsMapClass():
                @Object) >= CLASS_INSTANCE_EXACT_MATCH) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapDlt...
     P                 B
     D                 PI              *
     D  @                              *
      *À
      /free

         //ÀInstance be a member of the current class
            ClassInstanceCheck(AbsMapClass():@) ;

         //ÀFinished
            RETURN ObjectDlt(@) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Initialise
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapInitialise...
     P                 B
     D                 PI
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(AbsMap_) BASED(@this)
      *À
      /free

         //ÀInvoke superclass method
            @this= superInitialise(AbsMapClass():@) ;

         //ÀInitialise
            this.@KeySet= null ;
            this.@Values= null ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Finalise
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapFinalise...
     P                 B
     D                 PI
     D  @                              *   CONST
      *À
     D @this           S               *
      *À
      /free

         //ÀCast to this class
            @this= ClassCast(AbsMapClass():@) ;

         //ÀInvoke superclass method
            superFinalise(AbsMapClass():@this) ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Clear
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapClear...
     P                 B
     D                 PI
     D  @                              *   CONST
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR                  EXTPROC(@Virtual)
     D  @                              *   CONST
      *À
     D @this           S               *
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀClear the entry set
            SetClear(AbsMapEntrySet(@this)) ;

         //ÀFinished
            RETURN ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsMapClass():@this:
                 'thisClear') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  Virtual(@this) ;
                  RETURN ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;


      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Clone
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapClone...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
      *ÀWork fields
     D @this           S               *
     D this            DS                  LIKEDS(AbsMap_) BASED(@this)
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              *
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
      *À
      *ÀWork fields
     D @clone          S               *
     D clone           DS                  LIKEDS(AbsMap_) BASED(@clone)
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀInvoke superclass method
            @clone= superClone(AbsMapClass():@this) ;

         //ÀInitialise
            clone.@KeySet= null ;
            clone.@Values= null ;

         //ÀFinished
            RETURN @clone ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsMapClass():@this:
                 'thisClone') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass errors back to caller
               MONITOR ;
                  RETURN Virtual(@this) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Contains Key
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapContainsKey...
     P                 B
     D                 PI              N
     D  @                              *   CONST
     D  @Key                           *   CONST
      *À
      *ÀWork fields
     D @this           S               *
     D this            DS                  LIKEDS(AbsMap_) BASED(@this)
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              N
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
     D  @Key                           *   CONST
      *À
     D @Iterator       S               *
     D @MapEntry       S               *
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀUse an iterator
            @Iterator= SetNewIterator(AbsMapEntrySet(@this)) ;

         //ÀThe test will be different if the key is null
            IF (@Key = null) ;

            //ÀCompare each MapEntry key to null
               DOW ForEach(@Iterator:@MapEntry) ;
                  IF (MapEntryGetKey(@MapEntry) = null) ;
                     IteratorDlt(@Iterator) ;
                     RETURN true ;
                  ENDIF ;
               ENDDO ;

            ELSE ;

            //ÀCompare supplied key to each MapEntry key
               DOW ForEach(@Iterator:@MapEntry) ;
                  IF (ObjectEquals(@Key:
                        MapEntryGetKey(@MapEntry)) = true) ;
                     IteratorDlt(@Iterator) ;
                     RETURN true ;
                  ENDIF ;
               ENDDO ;

            ENDIF ;

         //ÀFinished
            RETURN false ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsMapClass():@this:
                 'thisContainsKey') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass errors back to caller
               MONITOR ;
                  RETURN Virtual(@this:@Key) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Contains Value
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapContainsValue...
     P                 B
     D                 PI              N
     D  @                              *   CONST
     D  @Value                         *   CONST
      *À
      *ÀWork fields
     D @this           S               *
     D this            DS                  LIKEDS(AbsMap_) BASED(@this)
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              N
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
     D  @Value                         *   CONST
      *À
     D @Iterator       S               *
     D @MapEntry       S               *
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀUse an iterator
            @Iterator= SetNewIterator(AbsMapEntrySet(@this)) ;

         //ÀThe test will be different if the value is null
            IF (@Value = null) ;

            //ÀCompare each MapEntry value to null
               DOW ForEach(@Iterator:@MapEntry) ;
                  IF (MapEntryGetValue(@MapEntry) = null) ;
                     IteratorDlt(@Iterator) ;
                     RETURN true ;
                  ENDIF ;
               ENDDO ;

            ELSE ;

            //ÀCompare supplied value to each MapEntry value
               DOW ForEach(@Iterator:@MapEntry) ;
                  IF (ObjectEquals(@Value:
                        MapEntryGetValue(@MapEntry)) = true) ;
                     IteratorDlt(@Iterator) ;
                     RETURN true ;
                  ENDIF ;
               ENDDO ;

            ENDIF ;

         //ÀFinished
            RETURN false ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsMapClass():@this:
                 'thisContainsValue') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass errors back to caller
               MONITOR ;
                  RETURN Virtual(@this:@Value) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Entry Set
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapEntrySet...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              *   EXTPROC(@Virtual)
     D  @                              *   CONST
      *À
     D @this           S               *
      *À
      /free

           //ÀPick up object pointer
              @this= @ ;

           //ÀAbstract method must be overridden
              @Virtual= ClassRtvVirtual(AbsMapClass():@this:
                 'thisEntrySet') ;
              IF (@Virtual = null) ;
                 Throw('Abstract method has no override: '+
                    'thisEntrySet') ;
              ENDIF ;

         //ÀFinished
            RETURN Virtual(@this) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Equals
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapEquals...
     P                 B
     D                 PI              N
     D  @                              *   CONST
     D  @that                          *   CONST
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              N   EXTPROC(@Virtual)
     D  @                              *   CONST
     D  @that                          *   CONST
      *À
     D @this           S               *
     D @Iterator       S               *
     D @MapEntry       S               *
     D @Key            S               *
     D @Value          S               *
     D @MapValue       S               *
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀMust be an implementation of the Map interface
            IF (instanceOfMap(@that) = false) ;
               RETURN false ;
            ENDIF ;

         //ÀEqual if same instance
            IF (castObject(@this) = castObject(@that)) ;
               RETURN true ;
            ENDIF ;

         //ÀNot equal if different size
            IF (AbsMapSize(@this) <> MapSize(@that)) ;
               RETURN false ;
            ENDIF ;

         //ÀWatch for errors
            MONITOR ;

            //ÀUse an iterator
               @Iterator= SetNewIterator(AbsMapEntrySet(@this)) ;

            //ÀLoop through entries
               DOW ForEach(@Iterator:@MapEntry) ;

               //ÀFetch key and value for this entry
                  @Key= MapEntryGetKey(@MapEntry) ;
                  @Value= MapEntryGetValue(@MapEntry) ;

               //ÀFetch Map Value for this key
                  @MapValue= MapGet(@that:@Key) ;

               //ÀTest is different if this value is null
                  IF (@Value = null) ;

                  //ÀNull value must be associated with key in supplied Map
                     IF (@MapValue <> null)
                        OR (MapContainsKey(@that:@Key) = false) ;
                        IteratorDlt(@Iterator) ;
                        RETURN false ;
                     ENDIF ;

                  ELSE ;

                  //ÀValue must be present in supplied Map
                     IF (ObjectEquals(@Value:@MapValue) = false) ;
                        IteratorDlt(@Iterator) ;
                        RETURN false ;
                     ENDIF ;

                  ENDIF ;

            //ÀNext MapEntry
               ENDDO ;

         //ÀBring all errors here
            ON-ERROR ;

         //ÀHandle specific errors
            SELECT ;

         //ÀNull pointer
            WHEN Catch('DLL0005') ;
               RETURN false ;

         //ÀClass cast failure
            WHEN Catch('DLL0006') ;
               RETURN false ;
            ENDSL ;

         //ÀThrow everything else back to caller
            Throw() ;

            ENDMON ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsMapClass():@this:
                 'thisEquals') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this:@that) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Get
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapGet...
     P                 B
     D                 PI              *
     D  @                              *   CONST
     D  @Key                           *   CONST
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              *   EXTPROC(@Virtual)
     D  @                              *   CONST
     D  @Key                           *   CONST
      *À
     D @this           S               *
     D @Iterator       S               *
     D @MapEntry       S               *
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀUse an iterator
            @Iterator= SetNewIterator(AbsMapEntrySet(@this)) ;

         //ÀThe test will be different if the key is null
            IF (@Key = null) ;

            //ÀCompare each MapEntry key to null
               DOW ForEach(@Iterator:@MapEntry) ;
                  IF (MapEntryGetKey(@MapEntry) = null) ;
                     IteratorDlt(@Iterator) ;
                     RETURN MapEntryGetValue(@MapEntry) ;
                  ENDIF ;
               ENDDO ;

            ELSE ;

            //ÀCompare supplied key to each MapEntry key
               DOW ForEach(@Iterator:@MapEntry) ;
                  IF (ObjectEquals(@Key:
                        MapEntryGetKey(@MapEntry)) = true) ;
                     IteratorDlt(@Iterator) ;
                     RETURN MapEntryGetValue(@MapEntry) ;
                  ENDIF ;
               ENDDO ;

            ENDIF ;

         //ÀFinished
            RETURN null ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsMapClass():@this:
                 'thisGet') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this:@Key) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: HashCode
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapHashCode...
     P                 B
     D                 PI            10I 0
     D  @                              *   CONST
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR            10I 0 EXTPROC(@Virtual)
     D  @                              *   CONST
      *À
     D @this           S               *
     D @Iterator       S               *
     D @MapEntry       S               *
      *À
     D Hash            DS                  QUALIFIED
     D  All                    1      8I 0
     D  High                   1      4U 0
     D  Low                    5      8I 0
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀUse an iterator
            @Iterator= SetNewIterator(AbsMapEntrySet(@this)) ;

         //ÀLoop through Set
            DOW ForEach(@Iterator:@MapEntry) ;
               Hash.Low+= MapEntryHashCode(@MapEntry) ;
               Hash.High= 0 ;
            ENDDO ;

         //ÀFinished
            RETURN Hash.Low ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsMapClass():@this:
                 'thisHashCode') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Is Empty
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapIsEmpty...
     P                 B
     D                 PI              N
     D  @                              *   CONST
      *À
      /free

           //ÀFinished
              RETURN (AbsMapSize(@) = 0) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Key Set
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapKeySet...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              *   EXTPROC(@Virtual)
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(AbsMap_) BASED(@this)
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀExit if already built
            IF (this.@KeySet <> null) ;
               RETURN this.@KeySet ;
            ENDIF ;

         //ÀCreate the KeySet
            this.@KeySet= new#KeySet(@this) ;

         //ÀFinished
            RETURN this.@KeySet ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsMapClass():@this:
                 'thisKeySet') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Put
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapPut...
     P                 B
     D                 PI              *
     D  @                              *   CONST
     D  @Key                           *   CONST
     D  @Value                         *   CONST
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              *   EXTPROC(@Virtual)
     D  @                              *   CONST
     D  @Key                           *   CONST
     D  @Value                         *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(AbsMap_) BASED(@this)
      *À
     D DLL0022         DS                  QUALIFIED
     D  ClassName                   126A
     D  Method                      126A
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀLoad error details
            DLL0022.ClassName= 'AbstractMap' ;
            DLL0022.Method= 'thisPut' ;

         //ÀError
            Throw(DLL0022:'DLL0022':'DLLMSGF') ;

         //ÀFinished
            RETURN null ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsMapClass():@this:
                 'thisPut') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this:@Key:@Value) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Put All
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapPutAll...
     P                 B
     D                 PI
     D  @                              *   CONST
     D  @Map                           *   CONST
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR                  EXTPROC(@Virtual)
     D  @                              *   CONST
     D  @Map                           *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(AbsMap_) BASED(@this)
      *À
     D @Iterator       S               *
     D @Entry          S               *
     D @Key            S               *
     D @Value          S               *
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀCatch any errors
            MONITOR ;

            //ÀUse an iterator
               @Iterator= SetNewIterator(MapEntrySet(@Map)) ;
               DOW ForEach(@Iterator:@Entry) ;

               //ÀFetch key and value
                  @Key= MapEntryGetKey(@Entry) ;
                  @Value= MapEntryGetValue(@Entry) ;

               //ÀPut to map
                  AbsMapPut(@this:@Key:@Value) ;

            //ÀLoop
               ENDDO ;

         //ÀPass any errors back to caller
            ON-ERROR ;
               IF (@Iterator <> null) ;
                  IteratorDlt(@Iterator) ;
               ENDIF ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsMapClass():@this:
                 'thisPutAll') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  Virtual(@this:@Map) ;
                  RETURN ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Remove
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapRemove...
     P                 B
     D                 PI              *
     D  @                              *   CONST
     D  @Key                           *   CONST
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              *   EXTPROC(@Virtual)
     D  @                              *   CONST
     D  @Key                           *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(AbsMap_) BASED(@this)
      *À
     D @Iterator       S               *
     D @Entry          S               *
     D @Value          S               *
     D @Found          S               *
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀUse an iterator
            @Iterator= SetNewIterator(AbsMapEntrySet(@this)) ;

         //ÀSeparate out null key search
            IF (@Key = null) ;

            //ÀLoop through the entries
               DOW ForEach(@Iterator:@Entry) ;

               //ÀLeave loop if the key is found
                  IF (MapEntryGetKey(@Entry) = null) ;
                     @Found= @Entry ;
                     LEAVE ;
                  ENDIF ;

            //ÀLoop
               ENDDO ;

            ELSE ;

            //ÀLoop through the entries
               DOW ForEach(@Iterator:@Entry) ;

               //ÀLeave loop if the key is found
                  IF (ObjectEquals(@Key:
                        MapEntryGetKey(@Entry)) = true) ;
                     @Found= @Entry ;
                     LEAVE ;
                  ENDIF ;

            //ÀLoop
               ENDDO ;

            ENDIF ;

         //ÀIf an entry was found, pick up value
            IF (@Found <> null) ;
               @Value= MapEntryGetValue(@Entry) ;
               IteratorRemove(@Iterator) ;
               IteratorDlt(@Iterator) ;
            ENDIF ;

         //ÀFinished
            RETURN @Value ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsMapClass():@this:
                 'thisRemove') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this:@Key) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Size
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapSize...
     P                 B
     D                 PI            10I 0
     D  @                              *   CONST
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR            10I 0 EXTPROC(@Virtual)
     D  @                              *   CONST
      *À
     D @this           S               *
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀFinished
            RETURN SetSize(AbsMapEntrySet(@this)) ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsMapClass():@this:
                 'thisSize') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Convert To String
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapToString...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
      *ÀWork fields
     D @this           S               *
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              *
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
      *À
     D @Iterator       S               *
     D @Entry          S               *
     D @Key            S               *
     D @Value          S               *
     D @Other          S               *
     D @String         S               *
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀInclude as required
            IF (@ClsString.@newThis = null) ;
               include(@ClsString) ;
            ENDIF ;

         //ÀEmpty collection
            IF AbsMapIsEmpty(@this) ;
               RETURN newString('<>') ;
            ENDIF ;

         //ÀThe result
            @String= newString('<') ;

         //ÀFetch an Iterator
            @Iterator= SetNewIterator(AbsMapEntrySet(@this)) ;

         //ÀMove the pointer for checking purposes
            @this= castObject(@this) ;

         //ÀIterate through the map
            DOW ForEach(@Iterator:@Entry) ;

            //ÀGet Key and Value from Entry
               @Key= MapEntryGetKey(@Entry) ;
               @Value= MapEntryGetValue(@Entry) ;

            //ÀConvert and append Key as a String
               SELECT ;

            //ÀNull
               WHEN (@Key = null) ;
                  StringAppend(@String:'null') ;

            //ÀMap contains itself
               WHEN (@this= castObject(@Key)) ;
                  StringAppend(@String:'(this map)') ;

            //ÀOtherwise regular entry
               OTHER ;

               //ÀConvert to string and append
                  @Other= ObjectToString(@Key) ;
                  StringAppend(@String:@Other) ;
                  StringDlt(@Other) ;

               ENDSL ;

            //ÀEach Entry is given as Key=Value
               StringAppend(@String:'=') ;

            //ÀConvert and append Value as a String
               SELECT ;

            //ÀNull
               WHEN (@Value = null) ;
                  StringAppend(@String:'null') ;

            //ÀMap contains itself
               WHEN (@this= castObject(@Value)) ;
                  StringAppend(@String:'(this map)') ;

            //ÀOtherwise regular entry
               OTHER ;

               //ÀConvert to string and append
                  @Other= ObjectToString(@Value) ;
                  StringAppend(@String:@Other) ;
                  StringDlt(@Other) ;

               ENDSL ;

            //ÀAppend seperator
               IF IteratorHasNext(@Iterator) ;
                  StringAppend(@String:', ') ;
               ENDIF ;

         //ÀLoop
            ENDDO ;

         //ÀClosing bracket
            StringAppend(@String:'>') ;

         //ÀFinished
            RETURN @String ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsMapClass():@this:
                 'thisToString') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Convert To Varying
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapToVarying...
     P                 B
     D                 PI           510A   VARYING
     D  @                              *   CONST
      *À
      *ÀWork fields
     D @this           S               *
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR           510A   VARYING
     D                                     EXTPROC(@Virtual)
     D  @                              *   CONST
      *À
     D @String         S               *
     D Varying         S            510A   VARYING
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀCreate a String
            @String= AbsMapToString(@this) ;

         //ÀForm the varying version
            Varying= StringToVarying(@String) ;

         //ÀTidy up
            StringDlt(@String) ;

         //ÀFinished
            RETURN Varying ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsMapClass():@this:
                 'thisToVarying') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass errors back to caller
               MONITOR ;
                  RETURN Virtual(@this) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Values
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapValues...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
     D @Virtual        S               *   PROCPTR
     D Virtual         PR              *   EXTPROC(@Virtual)
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(AbsMap_) BASED(@this)
      *À
      /free

         //ÀCheck for overrides
            EXSR #Override ;

         //ÀExit if already built
            IF (this.@Values <> null) ;
               RETURN this.@Values ;
            ENDIF ;

         //ÀCreate the Values
            this.@Values= new#ValCol(@this) ;

         //ÀFinished
            RETURN this.@Values ;

         //À----------------------------------------------------------------------------------------
         //ÀCheck for overrides
         //À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            BEGSR #Override ;

            //ÀPick up object pointer
               @this= @ ;

            //ÀCheck for overrides
               @Virtual= ClassRtvVirtual(AbsMapClass():@this:
                 'thisValues') ;
               IF (@Virtual = null) ;
                  LEAVESR ;
               ENDIF ;

            //ÀPass any errors back to caller
               MONITOR ;
                  RETURN Virtual(@this) ;
               ON-ERROR ;
                  Throw() ;
               ENDMON ;

         //ÀFinished
            ENDSR ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Maintain public field - @KeySet
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapMntFld@KeySet...
     P                 B
     D                 PI              *
     D  @                              *   CONST
     D  @NewValue                      *   CONST OPTIONS(*NOPASS)
      *À
     D @this           S               *
     D this            DS                  LIKEDS(AbsMap_) BASED(@this)
      *À
     D @OldValue       S               *
      *
      /free

         //ÀMust be correct type
            @this= castAbsMap(@) ;

         //ÀOnly one parameter means this is a get rather than a set
            IF (%Parms() = 1) ;
               RETURN this.@KeySet ;
            ENDIF ;

         //ÀCopy out old value
            Assign(@OldValue:this.@KeySet) ;

         //ÀSet new value
            Assign(this.@KeySet:@NewValue) ;

         //ÀRelease old value
            Object_Release(@OldValue) ;

         //ÀFinished
            RETURN @OldValue ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀAbsMap: Maintain public field - @Values
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P AbsMapMntFld@Values...
     P                 B
     D                 PI              *
     D  @                              *   CONST
     D  @NewValue                      *   CONST OPTIONS(*NOPASS)
      *À
     D @this           S               *
     D this            DS                  LIKEDS(AbsMap_) BASED(@this)
      *À
     D @OldValue       S               *
      *
      /free

         //ÀMust be correct type
            @this= castAbsMap(@) ;

         //ÀOnly one parameter means this is a get rather than a set
            IF (%Parms() = 1) ;
               RETURN this.@Values ;
            ENDIF ;

         //ÀCopy out old value
            Assign(@OldValue:this.@Values) ;

         //ÀSet new value
            Assign(this.@Values:@NewValue) ;

         //ÀRelease old value
            Object_Release(@OldValue) ;

         //ÀFinished
            RETURN @OldValue ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySet: Class definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #KeySetClass...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *
      *ÀClass Definition Template
     D #template       DS                  QUALIFIED
     D                               16A   INZ('*CLASS*TEMPLATE*')
     D                              126A   VARYING INZ(
     D                                     '#KeySet')
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               10I 0 INZ(%Size(#template))
     D                               10I 0 INZ(%Size(#KeySet_))
     D                                4A
      *
     D                              126A   VARYING INZ(
     D                                     'castThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     cast#KeySet))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'newThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     new#KeySet))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisDlt')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     #KeySetDlt))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisNewIterator')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     #KeySetNewIterator))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisClear')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     #KeySetClear))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisContains')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     #KeySetContains))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisIsEmpty')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     #KeySetIsEmpty))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisSize')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     #KeySetSize))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀBuild class definition
            @this= extendsAbsSet(#template) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySet: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P cast#KeySet...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
      /free

         //ÀCast as an instance of this class
            RETURN ClassCast(#KeySetClass():@) ;

      /end-free
      *À
      *ÀEnd of Procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySet: New
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P new#KeySet...
     P                 B
     D                 PI              *
     D  @Parent                        *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#KeySet_) BASED(@this)
      *À
      /free

         //ÀForm a new instance of this class
            @this= ClassNewInstance(#KeySetClass()) ;

         //ÀInitialise
            this.@This= @Parent ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of Procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySet: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #KeySetDlt...
     P                 B
     D                 PI              *
     D  @                              *
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#KeySet_) BASED(@this)
      *À
      /free

         //ÀMust be a member of the current class
            ClassInstanceCheck(#KeySetClass():@) ;

         //ÀFinished
            RETURN ObjectDlt(@) ;

      /end-free
      *À
      *ÀEnd of Procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySet: New Iterator
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #KeySetNewIterator...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#KeySet_) BASED(@this)
      *À
      /free

         //ÀMust be a #KeySet
            @this= castAbsMap(@) ;

         //ÀFinished
            RETURN new#KeySetItr(this.@This) ;

      /end-free
      *À
      *ÀEnd of Procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySet: Clear
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #KeySetClear...
     P                 B
     D                 PI
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#KeySet_) BASED(@this)
      *À
      /free

         //ÀMust be a KeySet
            @this= cast#KeySet(@) ;

         //ÀClear
            AbsMapClear(this.@This) ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of Procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySet: Contains
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #KeySetContains...
     P                 B
     D                 PI              N
     D  @                              *   CONST
     D  @Key                           *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#KeySet_) BASED(@this)
      *À
      /free

         //ÀMust be a KeySet
            @this= cast#KeySet(@) ;

         //ÀFinished
            RETURN AbsMapContainsKey(this.@This:@Key) ;

      /end-free
      *À
      *ÀEnd of Procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySet: Is Empty
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #KeySetIsEmpty...
     P                 B
     D                 PI              N
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#KeySet_) BASED(@this)
      *À
      /free

         //ÀMust be a KeySet
            @this= cast#KeySet(@) ;

         //ÀFinished
            RETURN AbsMapIsEmpty(this.@This) ;

      /end-free
      *À
      *ÀEnd of Procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySet: Size
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #KeySetSize...
     P                 B
     D                 PI            10I 0
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#KeySet_) BASED(@this)
      *À
      /free

         //ÀMust be a KeySet
            @this= cast#KeySet(@) ;

         //ÀFinished
            RETURN AbsMapSize(this.@This) ;

      /end-free
      *À
      *ÀEnd of Procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySetItr: Class definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #KeySetItrClass...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *
      *ÀClass Definition Template
     D #template       DS                  QUALIFIED
     D                               16A   INZ('*CLASS*TEMPLATE*')
     D                              126A   VARYING INZ(
     D                                     '')
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               10I 0 INZ(%Size(#template))
     D                               10I 0 INZ(%Size(#KeySetItr_))
     D                                4A
      *
     D                              126A   VARYING INZ(
     D                                     'castThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     cast#KeySetItr))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'newThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     new#KeySetItr))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisDlt')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     #KeySetItrDlt))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisHasNext')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     #KeySetItrHasNext))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisNext')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     #KeySetItrNext))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisRemove')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     #KeySetItrRemove))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀBuild class definition
            @this= extendsObject(#template) ;

         //ÀInterface
            implementsIterator(@this) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySetItr: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P cast#KeySetItr...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
      /free

         //ÀCast as an instance of this class
            RETURN ClassCast(#KeySetItrClass():@) ;

      /end-free
      *À
      *ÀEnd of Procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySetItr: New
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P new#KeySetItr...
     P                 B
     D                 PI              *
     D  @Parent                        *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#KeySetItr_) BASED(@this)
      *À
      /free

         //ÀForm a new instance of this class
            @this= ClassNewInstance(#KeySetItrClass()) ;

         //ÀInitialise
            this.@Iterator= SetNewIterator(AbsMapEntrySet(@Parent)) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of Procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySetItr: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #KeySetItrDlt...
     P                 B
     D                 PI              *
     D  @                              *
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#KeySetItr_)
     D                                     BASED(@this)
      *À
      /free

         //ÀInstance be a member of the current class
            ClassInstanceCheck(#KeySetItrClass():@) ;

         //ÀTrash internals
            IF (this.@Iterator <> null) ;
               IteratorDlt(this.@Iterator) ;
            ENDIF ;

         //ÀFinished
            RETURN ObjectDlt(@) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySetItr: HasNext
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #KeySetItrHasNext...
     P                 B
     D                 PI              N
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#KeySetItr_)
     D                                     BASED(@this)
      *À
      /free

         //ÀPick up object
            @this= cast#KeySetItr(@) ;

         //ÀFinished
            RETURN IteratorHasNext(this.@Iterator) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySetItr: Next
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #KeySetItrNext...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#KeySetItr_)
     D                                     BASED(@this)
      *À
     D @Entry          S               *
      *À
      /free

         //ÀPick up object
            @this= cast#KeySetItr(@) ;

         //ÀFetch Entry
            @Entry= IteratorNext(this.@Iterator) ;

         //ÀFinished
            RETURN MapEntryGetKey(@Entry) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#KeySetItr: Remove
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #KeySetItrRemove...
     P                 B
     D                 PI
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#KeySetItr_)
     D                                     BASED(@this)
      *À
      /free

         //ÀPick up object
            @this= cast#KeySetItr(@) ;

         //ÀRemove
            MONITOR ;
               IteratorRemove(this.@Iterator) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValCol: Class definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #ValColClass...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *
      *ÀClass Definition Template
     D #template       DS                  QUALIFIED
     D                               16A   INZ('*CLASS*TEMPLATE*')
     D                              126A   VARYING INZ(
     D                                     '#ValCol')
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               10I 0 INZ(%Size(#template))
     D                               10I 0 INZ(%Size(#ValCol_))
     D                                4A
      *
     D                              126A   VARYING INZ(
     D                                     'castThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     cast#ValCol))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'newThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     new#ValCol))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisDlt')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     #ValColDlt))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisNewIterator')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     #ValColNewIterator))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisClear')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     #ValColClear))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisContains')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     #ValColContains))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisIsEmpty')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     #ValColIsEmpty))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisSize')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     #ValColSize))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀBuild class definition
            @this= extendsAbsCol(#template) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValCol: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P cast#ValCol...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
      /free

         //ÀCast as an instance of this class
            RETURN ClassCast(#ValColClass():@) ;

      /end-free
      *À
      *ÀEnd of Procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValCol: New
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P new#ValCol...
     P                 B
     D                 PI              *
     D  @Parent                        *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#ValCol_) BASED(@this)
      *À
      /free

         //ÀForm a new instance of this class
            @this= ClassNewInstance(#ValColClass()) ;

         //ÀInitialise
            this.@This= @Parent ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of Procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValCol: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #ValColDlt...
     P                 B
     D                 PI              *
     D  @                              *
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#ValCol_) BASED(@this)
      *À
      /free

         //ÀMust be a member of the current class
            ClassInstanceCheck(#ValColClass():@) ;

         //ÀFinished
            RETURN ObjectDlt(@) ;

      /end-free
      *À
      *ÀEnd of Procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValCol: New Iterator
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #ValColNewIterator...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#ValCol_) BASED(@this)
      *À
      /free

         //ÀMust be a #KeySet
            @this= castAbsMap(@) ;

         //ÀFinished
            RETURN new#ValColItr(this.@This) ;

      /end-free
      *À
      *ÀEnd of Procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValCol: Clear
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #ValColClear...
     P                 B
     D                 PI
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#ValCol_) BASED(@this)
      *À
      /free

         //ÀMust be a KeySet
            @this= cast#ValCol(@) ;

         //ÀClear
            AbsMapClear(this.@This) ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of Procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValCol: Contains
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #ValColContains...
     P                 B
     D                 PI              N
     D  @                              *   CONST
     D  @Value                         *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#ValCol_) BASED(@this)
      *À
      /free

         //ÀMust be a KeySet
            @this= cast#ValCol(@) ;

         //ÀFinished
            RETURN AbsMapContainsValue(this.@This:@Value) ;

      /end-free
      *À
      *ÀEnd of Procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValCol: Is Empty
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #ValColIsEmpty...
     P                 B
     D                 PI              N
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#ValCol_) BASED(@this)
      *À
      /free

         //ÀMust be a KeySet
            @this= cast#ValCol(@) ;

         //ÀFinished
            RETURN AbsMapIsEmpty(this.@This) ;

      /end-free
      *À
      *ÀEnd of Procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValCol: Size
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #ValColSize...
     P                 B
     D                 PI            10I 0
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#ValCol_) BASED(@this)
      *À
      /free

         //ÀMust be a KeySet
            @this= cast#ValCol(@) ;

         //ÀFinished
            RETURN AbsMapSize(this.@This) ;

      /end-free
      *À
      *ÀEnd of Procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValColItr: Class definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #ValColItrClass...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *
      *ÀClass Definition Template
     D #template       DS                  QUALIFIED
     D                               16A   INZ('*CLASS*TEMPLATE*')
     D                              126A   VARYING INZ(
     D                                     '')
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               10I 0 INZ(%Size(#template))
     D                               10I 0 INZ(%Size(#ValColItr_))
     D                                4A
      *
     D                              126A   VARYING INZ(
     D                                     'castThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     cast#ValColItr))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'newThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     new#ValColItr))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisDlt')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     #ValColItrDlt))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisHasNext')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     #ValColItrHasNext))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisNext')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     #ValColItrNext))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisRemove')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     #ValColItrRemove))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀBuild class definition
            @this= extendsObject(#template) ;

         //ÀInterface
            implementsIterator(@this) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValColItr: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P cast#ValColItr...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
      /free

         //ÀCast as an instance of this class
            RETURN ClassCast(#ValColItrClass():@) ;

      /end-free
      *À
      *ÀEnd of Procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValColItr: New
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P new#ValColItr...
     P                 B
     D                 PI              *
     D  @Parent                        *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#ValColItr_) BASED(@this)
      *À
      /free

         //ÀForm a new instance of this class
            @this= ClassNewInstance(#ValColItrClass()) ;

         //ÀInitialise
            this.@Iterator= SetNewIterator(AbsMapEntrySet(@Parent)) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of Procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValColItr: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #ValColItrDlt...
     P                 B
     D                 PI              *
     D  @                              *
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#ValColItr_)
     D                                     BASED(@this)
      *À
      /free

         //ÀInstance be a member of the current class
            ClassInstanceCheck(#ValColItrClass():@) ;

         //ÀTrash internals
            IF (this.@Iterator <> null) ;
               IteratorDlt(this.@Iterator) ;
            ENDIF ;

         //ÀFinished
            RETURN ObjectDlt(@) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValColItr: HasNext
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #ValColItrHasNext...
     P                 B
     D                 PI              N
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#ValColItr_)
     D                                     BASED(@this)
      *À
      /free

         //ÀPick up object
            @this= cast#ValColItr(@) ;

         //ÀFinished
            RETURN IteratorHasNext(this.@Iterator) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValColItr: Next
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #ValColItrNext...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#ValColItr_)
     D                                     BASED(@this)
      *À
     D @Entry          S               *
      *À
      /free

         //ÀPick up object
            @this= cast#ValColItr(@) ;

         //ÀFetch Entry
            @Entry= IteratorNext(this.@Iterator) ;

         //ÀFinished
            RETURN MapEntryGetValue(@Entry) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *À#ValColItr: Remove
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P #ValColItrRemove...
     P                 B
     D                 PI
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(#ValColItr_)
     D                                     BASED(@this)
      *À
      /free

         //ÀPick up object
            @this= cast#ValColItr(@) ;

         //ÀRemove
            MONITOR ;
               IteratorRemove(this.@Iterator) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpCmp: Class definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SmpCmpClass...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *
      *ÀClass Definition Template
     D #template       DS                  QUALIFIED
     D                               16A   INZ('*CLASS*TEMPLATE*')
     D                              126A   VARYING INZ(
     D                                     'SimpleComparator')
     D                               10I 0 INZ(ACCESS_PUB_FIN)
     D                               10I 0 INZ(%Size(#template))
     D                               10I 0 INZ(%Size(SmpCmp_))
     D                                4A
      *
     D                              126A   VARYING INZ(
     D                                     'castThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     castSmpCmp))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'instanceOfThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     instanceOfSmpCmp))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'newThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     newSmpCmp))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisDlt')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SmpCmpDlt))
     D                               10I 0 INZ(ACCESS_PUB_STA)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisCompare')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SmpCmpCompare))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisEquals')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SmpCmpEquals))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
     D                              126A   VARYING INZ(
     D                                     'thisHashCode')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SmpCmpHashCode))
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               12A
      *
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀBuild class definition
            @this= extendsObject(#template) ;

         //ÀComparator interface is supported
            implementsComparator(@this) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpCmp: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P castSmpCmp...
     P                 B
     D                 PI              *
     D  @                              *   CONST
      *À
      /free

         //ÀCast as an instance of this class
            RETURN ClassCast(SmpCmpClass():@) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpCmp: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P instanceOfSmpCmp...
     P                 B
     D                 PI              N
     D  @Object                        *   CONST
      *À
      /free

         //ÀFinished
            RETURN (
              ClassInstanceOf(
                SmpCmpClass():
                @Object) >= CLASS_INSTANCE_EXACT_MATCH) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpCmp: New
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P newSmpCmp...
     P                 B
     D                 PI              *
     D  @Compare                       *   PROCPTR CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(SmpCmp_) BASED(@this)
      *À
      /free

         //ÀForm a new instance of this class
            @this= ClassNewInstance(SmpCmpClass()) ;

        //À Initialise
            this.@Compare= @Compare ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpCmp: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SmpCmpDlt...
     P                 B
     D                 PI              *
     D  @                              *
      *À
      /free

         //ÀInstance be a member of the current class
            ClassInstanceCheck(SmpCmpClass():@) ;

         //ÀFinished
            RETURN ObjectDlt(@) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpCmp: Compare
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SmpCmpCompare...
     P                 B
     D                 PI            10I 0
     D  @                              *   CONST
     D  @ObjectA                       *   CONST
     D  @ObjectB                       *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(SmpCmp_)
     D                                     BASED(@this)
      *À
     D ExternalCompare...
     D                 PR            10I 0 EXTPROC(this.@Compare)
     D  @ObjectA                       *   CONST
     D  @ObjectB                       *   CONST
      *À
      /free

         //ÀMust be correct class
            @this= castSmpCmp(@) ;

         //ÀFinished
            RETURN ExternalCompare(@ObjectA:@ObjectB) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpCmp: Equals
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SmpCmpEquals...
     P                 B
     D                 PI              N
     D  @                              *   CONST
     D  @@                             *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(SmpCmp_)
     D                                     BASED(@this)
      *À
     D @that           S               *
     D that            DS                  LIKEDS(SmpCmp_)
     D                                     BASED(@that)
      *À
      /free

         //ÀMust be correct class
            @this= castSmpCmp(@) ;

            IF (instanceOfSmpCmp(@@) = false) ;
               RETURN false ;
            ENDIF ;

         //ÀPick up instance pointer
            @that= castSmpCmp(@@) ;

         //ÀFinished
            RETURN (this.@Compare = that.@Compare) ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSmpCmp: HashCode
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SmpCmpHashCode...
     P                 B
     D                 PI            10I 0
     D  @                              *   CONST
      *À
     D @this           S               *
     D this            DS                  LIKEDS(SmpCmp_)
     D                                     BASED(@this)
      *À
     D hash            S             10I 0 INZ(0)
      *À
      /free

         //ÀMust be correct class
            @this= castSmpCmp(@) ;

         //ÀCheck for nulls just in case
            IF (this.@Compare <> null) ;

            //ÀCalculate hash value
               Utility_CombineHash(hash:
                 %Addr(this.@Compare):%size(this.@Compare)) ;

            ENDIF ;

         //ÀFinished
            RETURN hash ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: Interface definition
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SortedSetInterface...
     P                 B
     D                 PI              *
      *À
     D @this           S               *   STATIC INZ(null)
      *
      *ÀInterface Definition Template
     D #template       DS                  QUALIFIED
     D                               16A   INZ('*IFACE*TEMPLATE*')
     D                              126A   VARYING INZ(
     D                                     'SortedSet')
     D                               10I 0 INZ(ACCESS_PUBLIC)
     D                               10I 0 INZ(%Size(#template))
     D                                8A
      *
     D                              126A   VARYING INZ(
     D                                     'extendsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     extendsSortedSet))
      *
     D                              126A   VARYING INZ(
     D                                     'castThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     castSortedSet))
      *
     D                              126A   VARYING INZ(
     D                                     'instanceOfThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     instanceOfSortedSet))
      *
     D                              126A   VARYING INZ(
     D                                     'implementsThis')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     implementsSortedSet))
      *
     D                              126A   VARYING INZ(
     D                                     'thisDlt')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SortedSetDlt))
      *
     D                              126A   VARYING INZ(
     D                                     'thisComparator')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SortedSetComparator))
      *
     D                              126A   VARYING INZ(
     D                                     'thisFirst')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SortedSetFirst))
      *
     D                              126A   VARYING INZ(
     D                                     'thisHeadSet')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SortedSetHeadSet))
      *
     D                              126A   VARYING INZ(
     D                                     'thisLast')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SortedSetLast))
      *
     D                              126A   VARYING INZ(
     D                                     'thisSubSet')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SortedSetSubSet))
      *
     D                              126A   VARYING INZ(
     D                                     'thisTailSet')
     D                                 *   PROCPTR INZ(%pAddr(
     D                                     SortedSetTailSet))
      *
      /free

         //ÀReturn pointer if already initialised
            IF (@this <> null) ;
               RETURN @this ;
            ENDIF ;

         //ÀBuild interface definition
            @this= newInterface(#template) ;

         //ÀExtends Set interface
            extendsSet(@this) ;

         //ÀFinished
            RETURN @this ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: Extends
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P extendsSortedSet...
     P                 B
     D                 PI
     D  @Interface                     *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceExtends(
                 SortedSetInterface():
                 @Interface) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: Cast
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P castSortedSet...
     P                 B
     D                 PI
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceCast(
                 SortedSetInterface():
                 @this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: Instance Of
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P instanceOfSortedSet...
     P                 B
     D                 PI              N
     D  @Object                        *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               RETURN (
                 InterfaceInstanceOf(
                   SortedSetInterface():
                   @Object) = INTERFACE_INSTANCE_EXACT_MATCH) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: Implements
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P implementsSortedSet...
     P                 B
     D                 PI
     D  @Class                         *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               InterfaceImplements(
                 SortedSetInterface():
                 @Class) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

         //ÀFinished
            RETURN ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: Delete
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SortedSetDlt...
     P                 B
     D                 PI              *
     D  @this                          *
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *
     D                                     EXTPROC(@Action)
     D  @this                          *
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 SortedSetInterface():
                 @this:
                 'thisDlt') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: Comparator
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SortedSetComparator...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 SortedSetInterface():
                 @this:
                 'thisComparator') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: First
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SortedSetFirst...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 SortedSetInterface():
                 @this:
                 'thisFirst') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: HeadSet
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SortedSetHeadSet...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
     D  @ElementTo                     *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @ElementTo                     *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 SortedSetInterface():
                 @this:
                 'thisHeadSet') ;
               RETURN Action(@this:@ElementTo) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: Last
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SortedSetLast...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 SortedSetInterface():
                 @this:
                 'thisLast') ;
               RETURN Action(@this) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: SubSet
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SortedSetSubSet...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
     D  @ElementFrom                   *   CONST
     D  @ElementTo                     *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @ElementFrom                   *   CONST
     D  @ElementTo                     *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 SortedSetInterface():
                 @this:
                 'thisSubSet') ;
               RETURN Action(@this:@ElementFrom:@ElementTo) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
      *À--------------------------------------------------------------------------------------------
      *ÀSortedSet: TailSet
      *À- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     P SortedSetTailSet...
     P                 B
     D                 PI              *
     D  @this                          *   CONST
     D  @ElementFrom                   *   CONST
      *À
     D @Action         S               *   PROCPTR
     D Action          PR              *   EXTPROC(@Action)
     D  @this                          *   CONST
     D  @ElementFrom                   *   CONST
      *À
      /free

         //ÀSend any errors back to the caller
            MONITOR ;
               @Action= InterfaceRtv(
                 SortedSetInterface():
                 @this:
                 'thisTailSet') ;
               RETURN Action(@this:@ElementFrom) ;
            ON-ERROR ;
               Throw() ;
            ENDMON ;

      /end-free
      *À
      *ÀEnd of procedure
     P                 E
      *À
